/**
 * endoflife.date
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki).
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Cycle.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

Cycle::Cycle(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string Cycle::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void Cycle::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree Cycle::toPropertyTree()
{
    return toPropertyTree_internal();
}

void Cycle::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string Cycle::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void Cycle::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree Cycle::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	if (m_Cycle != nullptr) {
		pt.add_child("cycle", m_Cycle->toPropertyTree());
	}
	pt.put("releaseDate", m_ReleaseDate);
	if (m_Eol != nullptr) {
		pt.add_child("eol", m_Eol->toPropertyTree());
	}
	pt.put("latest", m_Latest);
	pt.put("link", m_Link);
	if (m_Lts != nullptr) {
		pt.add_child("lts", m_Lts->toPropertyTree());
	}
	if (m_Support != nullptr) {
		pt.add_child("support", m_Support->toPropertyTree());
	}
	if (m_Discontinued != nullptr) {
		pt.add_child("discontinued", m_Discontinued->toPropertyTree());
	}
	return pt;
}

void Cycle::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	if (pt.get_child_optional("cycle")) {
		m_Cycle = std::make_shared<Cycle_cycle>();
		m_Cycle->fromPropertyTree(pt.get_child("cycle"));
	}
	m_ReleaseDate = pt.get("releaseDate", "");
	if (pt.get_child_optional("eol")) {
		m_Eol = std::make_shared<Cycle_eol>();
		m_Eol->fromPropertyTree(pt.get_child("eol"));
	}
	m_Latest = pt.get("latest", "");
	m_Link = pt.get("link", "");
	if (pt.get_child_optional("lts")) {
		m_Lts = std::make_shared<Cycle_lts>();
		m_Lts->fromPropertyTree(pt.get_child("lts"));
	}
	if (pt.get_child_optional("support")) {
		m_Support = std::make_shared<Cycle_support>();
		m_Support->fromPropertyTree(pt.get_child("support"));
	}
	if (pt.get_child_optional("discontinued")) {
		m_Discontinued = std::make_shared<Cycle_discontinued>();
		m_Discontinued->fromPropertyTree(pt.get_child("discontinued"));
	}
}

std::shared_ptr<Cycle_cycle> Cycle::getCycle() const
{
    return m_Cycle;
}

void Cycle::setCycle(std::shared_ptr<Cycle_cycle> value)
{
	m_Cycle = value;
}
std::string Cycle::getReleaseDate() const
{
    return m_ReleaseDate;
}

void Cycle::setReleaseDate(std::string value)
{
	m_ReleaseDate = value;
}
std::shared_ptr<Cycle_eol> Cycle::getEol() const
{
    return m_Eol;
}

void Cycle::setEol(std::shared_ptr<Cycle_eol> value)
{
	m_Eol = value;
}
std::string Cycle::getLatest() const
{
    return m_Latest;
}

void Cycle::setLatest(std::string value)
{
	m_Latest = value;
}
std::string Cycle::getLink() const
{
    return m_Link;
}

void Cycle::setLink(std::string value)
{
	m_Link = value;
}
std::shared_ptr<Cycle_lts> Cycle::getLts() const
{
    return m_Lts;
}

void Cycle::setLts(std::shared_ptr<Cycle_lts> value)
{
	m_Lts = value;
}
std::shared_ptr<Cycle_support> Cycle::getSupport() const
{
    return m_Support;
}

void Cycle::setSupport(std::shared_ptr<Cycle_support> value)
{
	m_Support = value;
}
std::shared_ptr<Cycle_discontinued> Cycle::getDiscontinued() const
{
    return m_Discontinued;
}

void Cycle::setDiscontinued(std::shared_ptr<Cycle_discontinued> value)
{
	m_Discontinued = value;
}

std::vector<Cycle> createCycleVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<Cycle>();
    for (const auto& child: pt) {
        vec.emplace_back(Cycle(child.second));
    }

    return vec;
}

}
}
}
}

