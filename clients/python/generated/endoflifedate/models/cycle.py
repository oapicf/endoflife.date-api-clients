# coding: utf-8

"""
    endoflife.date

    Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)

    The version of the OpenAPI document: 0.0.1
    Contact: blah+oapicf@cliffano.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from endoflifedate.models.cycle_cycle import CycleCycle
from endoflifedate.models.cycle_discontinued import CycleDiscontinued
from endoflifedate.models.cycle_eol import CycleEol
from endoflifedate.models.cycle_lts import CycleLts
from endoflifedate.models.cycle_support import CycleSupport
from typing import Optional, Set
from typing_extensions import Self

class Cycle(BaseModel):
    """
    Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
    """ # noqa: E501
    cycle: Optional[CycleCycle] = None
    release_date: Optional[date] = Field(default=None, description="Release Date for the first release in this cycle", alias="releaseDate")
    eol: Optional[CycleEol] = None
    latest: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="Latest release in this cycle")
    link: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="Link to changelog for the latest release, if available")
    lts: Optional[CycleLts] = None
    support: Optional[CycleSupport] = None
    discontinued: Optional[CycleDiscontinued] = None
    __properties: ClassVar[List[str]] = ["cycle", "releaseDate", "eol", "latest", "link", "lts", "support", "discontinued"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Cycle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cycle
        if self.cycle:
            _dict['cycle'] = self.cycle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eol
        if self.eol:
            _dict['eol'] = self.eol.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lts
        if self.lts:
            _dict['lts'] = self.lts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of support
        if self.support:
            _dict['support'] = self.support.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discontinued
        if self.discontinued:
            _dict['discontinued'] = self.discontinued.to_dict()
        # set to None if link (nullable) is None
        # and model_fields_set contains the field
        if self.link is None and "link" in self.model_fields_set:
            _dict['link'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Cycle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cycle": CycleCycle.from_dict(obj["cycle"]) if obj.get("cycle") is not None else None,
            "releaseDate": obj.get("releaseDate"),
            "eol": CycleEol.from_dict(obj["eol"]) if obj.get("eol") is not None else None,
            "latest": obj.get("latest"),
            "link": obj.get("link"),
            "lts": CycleLts.from_dict(obj["lts"]) if obj.get("lts") is not None else None,
            "support": CycleSupport.from_dict(obj["support"]) if obj.get("support") is not None else None,
            "discontinued": CycleDiscontinued.from_dict(obj["discontinued"]) if obj.get("discontinued") is not None else None
        })
        return _obj


