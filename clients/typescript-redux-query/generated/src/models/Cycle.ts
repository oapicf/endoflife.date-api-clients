// tslint:disable
/**
 * endoflife.date
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CycleCycle,
    CycleCycleFromJSON,
    CycleCycleToJSON,
    CycleDiscontinued,
    CycleDiscontinuedFromJSON,
    CycleDiscontinuedToJSON,
    CycleEol,
    CycleEolFromJSON,
    CycleEolToJSON,
    CycleLts,
    CycleLtsFromJSON,
    CycleLtsToJSON,
    CycleSupport,
    CycleSupportFromJSON,
    CycleSupportToJSON,
} from './';

/**
 * Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
 * @export
 * @interface Cycle
 */
export interface Cycle  {
    /**
     * 
     * @type {CycleCycle}
     * @memberof Cycle
     */
    cycle?: CycleCycle;
    /**
     * Release Date for the first release in this cycle
     * @type {Date}
     * @memberof Cycle
     */
    releaseDate?: Date;
    /**
     * 
     * @type {CycleEol}
     * @memberof Cycle
     */
    eol?: CycleEol;
    /**
     * Latest release in this cycle
     * @type {string}
     * @memberof Cycle
     */
    latest?: string;
    /**
     * Link to changelog for the latest release, if available
     * @type {string}
     * @memberof Cycle
     */
    link?: string;
    /**
     * 
     * @type {CycleLts}
     * @memberof Cycle
     */
    lts?: CycleLts;
    /**
     * 
     * @type {CycleSupport}
     * @memberof Cycle
     */
    support?: CycleSupport;
    /**
     * 
     * @type {CycleDiscontinued}
     * @memberof Cycle
     */
    discontinued?: CycleDiscontinued;
}

export function CycleFromJSON(json: any): Cycle {
    return {
        'cycle': !exists(json, 'cycle') ? undefined : CycleCycleFromJSON(json['cycle']),
        'releaseDate': !exists(json, 'releaseDate') ? undefined : new Date(json['releaseDate']),
        'eol': !exists(json, 'eol') ? undefined : CycleEolFromJSON(json['eol']),
        'latest': !exists(json, 'latest') ? undefined : json['latest'],
        'link': !exists(json, 'link') ? undefined : json['link'],
        'lts': !exists(json, 'lts') ? undefined : CycleLtsFromJSON(json['lts']),
        'support': !exists(json, 'support') ? undefined : CycleSupportFromJSON(json['support']),
        'discontinued': !exists(json, 'discontinued') ? undefined : CycleDiscontinuedFromJSON(json['discontinued']),
    };
}

export function CycleToJSON(value?: Cycle): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'cycle': CycleCycleToJSON(value.cycle),
        'releaseDate': value.releaseDate === undefined ? undefined : value.releaseDate.toISOString().substring(0,10),
        'eol': CycleEolToJSON(value.eol),
        'latest': value.latest,
        'link': value.link,
        'lts': CycleLtsToJSON(value.lts),
        'support': CycleSupportToJSON(value.support),
        'discontinued': CycleDiscontinuedToJSON(value.discontinued),
    };
}


