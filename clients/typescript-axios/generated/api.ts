/* tslint:disable */
/* eslint-disable */
/**
 * endoflife.date
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki).
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
 * @export
 * @interface Cycle
 */
export interface Cycle {
    /**
     * 
     * @type {CycleCycle}
     * @memberof Cycle
     */
    'cycle'?: CycleCycle;
    /**
     * Release date for the first release in this cycle.
     * @type {string}
     * @memberof Cycle
     */
    'releaseDate'?: string;
    /**
     * 
     * @type {CycleEol}
     * @memberof Cycle
     */
    'eol'?: CycleEol;
    /**
     * Latest release in this cycle.
     * @type {string}
     * @memberof Cycle
     */
    'latest'?: string;
    /**
     * Link to changelog for the latest release in this cycle, or null if unavailable.
     * @type {string}
     * @memberof Cycle
     */
    'link'?: string | null;
    /**
     * 
     * @type {CycleLts}
     * @memberof Cycle
     */
    'lts'?: CycleLts;
    /**
     * 
     * @type {CycleSupport}
     * @memberof Cycle
     */
    'support'?: CycleSupport;
    /**
     * 
     * @type {CycleDiscontinued}
     * @memberof Cycle
     */
    'discontinued'?: CycleDiscontinued;
}
/**
 * The release cycle which this release is part of.
 * @export
 * @interface CycleCycle
 */
export interface CycleCycle {
}
/**
 * Whether this device version is no longer in production.
 * @export
 * @interface CycleDiscontinued
 */
export interface CycleDiscontinued {
}
/**
 * End-of-Life date for this release cycle.
 * @export
 * @interface CycleEol
 */
export interface CycleEol {
}
/**
 * Whether this release cycle has long-term-support (LTS), or the date it entered LTS status.
 * @export
 * @interface CycleLts
 */
export interface CycleLts {
}
/**
 * Whether this release cycle has active support.
 * @export
 * @interface CycleSupport
 */
export interface CycleSupport {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return a list of all products. Each of these can be used for the other API endpoints.
         * @summary All Products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAllJson: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/all.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets details of a single cycle.
         * @summary Single cycle details
         * @param {string} product Product URL as per the canonical URL on the endofife.date website.
         * @param {string} cycle Release Cycle for which the details must be fetched. Any slash character in the cycle name will be replaced with dashes. For example FreeBSD\&#39;s releng/14.0 becomes releng-14.0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiProductCycleJson: async (product: string, cycle: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'product' is not null or undefined
            assertParamExists('getApiProductCycleJson', 'product', product)
            // verify required parameter 'cycle' is not null or undefined
            assertParamExists('getApiProductCycleJson', 'cycle', cycle)
            const localVarPath = `/api/{product}/{cycle}.json`
                .replace(`{${"product"}}`, encodeURIComponent(String(product)))
                .replace(`{${"cycle"}}`, encodeURIComponent(String(cycle)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get EoL dates of all cycles of a given product.
         * @summary Get All Details
         * @param {string} product Product URL as per the canonical URL on the endofife.date website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiProductJson: async (product: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'product' is not null or undefined
            assertParamExists('getApiProductJson', 'product', product)
            const localVarPath = `/api/{product}.json`
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Return a list of all products. Each of these can be used for the other API endpoints.
         * @summary All Products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiAllJson(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiAllJson(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getApiAllJson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets details of a single cycle.
         * @summary Single cycle details
         * @param {string} product Product URL as per the canonical URL on the endofife.date website.
         * @param {string} cycle Release Cycle for which the details must be fetched. Any slash character in the cycle name will be replaced with dashes. For example FreeBSD\&#39;s releng/14.0 becomes releng-14.0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiProductCycleJson(product: string, cycle: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cycle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiProductCycleJson(product, cycle, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getApiProductCycleJson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get EoL dates of all cycles of a given product.
         * @summary Get All Details
         * @param {string} product Product URL as per the canonical URL on the endofife.date website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiProductJson(product: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Cycle>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiProductJson(product, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getApiProductJson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Return a list of all products. Each of these can be used for the other API endpoints.
         * @summary All Products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAllJson(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.getApiAllJson(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets details of a single cycle.
         * @summary Single cycle details
         * @param {string} product Product URL as per the canonical URL on the endofife.date website.
         * @param {string} cycle Release Cycle for which the details must be fetched. Any slash character in the cycle name will be replaced with dashes. For example FreeBSD\&#39;s releng/14.0 becomes releng-14.0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiProductCycleJson(product: string, cycle: string, options?: RawAxiosRequestConfig): AxiosPromise<Cycle> {
            return localVarFp.getApiProductCycleJson(product, cycle, options).then((request) => request(axios, basePath));
        },
        /**
         * Get EoL dates of all cycles of a given product.
         * @summary Get All Details
         * @param {string} product Product URL as per the canonical URL on the endofife.date website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiProductJson(product: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Cycle>> {
            return localVarFp.getApiProductJson(product, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Return a list of all products. Each of these can be used for the other API endpoints.
     * @summary All Products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiAllJson(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiAllJson(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets details of a single cycle.
     * @summary Single cycle details
     * @param {string} product Product URL as per the canonical URL on the endofife.date website.
     * @param {string} cycle Release Cycle for which the details must be fetched. Any slash character in the cycle name will be replaced with dashes. For example FreeBSD\&#39;s releng/14.0 becomes releng-14.0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiProductCycleJson(product: string, cycle: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiProductCycleJson(product, cycle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get EoL dates of all cycles of a given product.
     * @summary Get All Details
     * @param {string} product Product URL as per the canonical URL on the endofife.date website.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiProductJson(product: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiProductJson(product, options).then((request) => request(this.axios, this.basePath));
    }
}



