<?php declare(strict_types=1);

/**
 * endoflife.date
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki).
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace OpenAPI\Server\Http\Controllers;

use Crell\Serde\SerdeCommon;
use Illuminate\Routing\Controller;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;


use OpenAPI\Server\Api\DefaultApiInterface;

class DefaultController extends Controller
{
    /**
     * Constructor
     */
    public function __construct(
        private readonly DefaultApiInterface $api,
        private readonly SerdeCommon $serde = new SerdeCommon(),
    )
    {
    }

    /**
     * Operation getApiAllJson
     *
     * All Products.
     *
     */
    public function getApiAllJson(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        try {
            $apiResult = $this->api->getApiAllJson();
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if (is_array($apiResult)) {
            $serialized = array_map(fn ($item) => $this->serde->serialize($item, format: 'array'), $apiResult);
            return response()->json($serialized, 200);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getApiProductCycleJson
     *
     * Single cycle details.
     *
     */
    public function getApiProductCycleJson(Request $request, string $product, string $cycle): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'product' => $product,'cycle' => $cycle,
                ],
                $request->all(),
            ),
            [
                'product' => [
                    'required',
                    'string',
                ],
                'cycle' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        try {
            $apiResult = $this->api->getApiProductCycleJson($product, $cycle);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\Cycle) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getApiProductJson
     *
     * Get All Details.
     *
     */
    public function getApiProductJson(Request $request, string $product): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'product' => $product,
                ],
                $request->all(),
            ),
            [
                'product' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        try {
            $apiResult = $this->api->getApiProductJson($product);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if (is_array($apiResult)) {
            $serialized = array_map(fn ($item) => $this->serde->serialize($item, format: 'array'), $apiResult);
            return response()->json($serialized, 200);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
}
