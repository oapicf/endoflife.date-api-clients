/* tslint:disable */
/* eslint-disable */
/**
 * endoflife.date
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
 * @export
 * @interface Cycle
 */
export interface Cycle {
    /**
     * Release Cycle
     * @type {any}
     * @memberof Cycle
     */
    cycle?: any | null;
    /**
     * Release Date for the first release in this cycle
     * @type {any}
     * @memberof Cycle
     */
    releaseDate?: any | null;
    /**
     * End of Life Date for this release cycle
     * @type {any}
     * @memberof Cycle
     */
    eol?: any | null;
    /**
     * Latest release in this cycle
     * @type {any}
     * @memberof Cycle
     */
    latest?: any | null;
    /**
     * Link to changelog for the latest release, if available
     * @type {any}
     * @memberof Cycle
     */
    link?: any | null;
    /**
     * Whether this release cycle has long-term-support (LTS). Can be a date instead in YYYY-MM-DD format as well if the release enters LTS status on a given date.
     * @type {any}
     * @memberof Cycle
     */
    lts?: any | null;
    /**
     * Whether this release cycle has active support
     * @type {any}
     * @memberof Cycle
     */
    support?: any | null;
    /**
     * Whether this cycle is now discontinued.
     * @type {any}
     * @memberof Cycle
     */
    discontinued?: any | null;
}

/**
 * Check if a given object implements the Cycle interface.
 */
export function instanceOfCycle(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CycleFromJSON(json: any): Cycle {
    return CycleFromJSONTyped(json, false);
}

export function CycleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Cycle {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'cycle': !exists(json, 'cycle') ? undefined : json['cycle'],
        'releaseDate': !exists(json, 'releaseDate') ? undefined : json['releaseDate'],
        'eol': !exists(json, 'eol') ? undefined : json['eol'],
        'latest': !exists(json, 'latest') ? undefined : json['latest'],
        'link': !exists(json, 'link') ? undefined : json['link'],
        'lts': !exists(json, 'lts') ? undefined : json['lts'],
        'support': !exists(json, 'support') ? undefined : json['support'],
        'discontinued': !exists(json, 'discontinued') ? undefined : json['discontinued'],
    };
}

export function CycleToJSON(value?: Cycle | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'cycle': value.cycle,
        'releaseDate': value.releaseDate,
        'eol': value.eol,
        'latest': value.latest,
        'link': value.link,
        'lts': value.lts,
        'support': value.support,
        'discontinued': value.discontinued,
    };
}

