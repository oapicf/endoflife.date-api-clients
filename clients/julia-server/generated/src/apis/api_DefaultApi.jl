# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function get_api_all_json_read(handler)
    function get_api_all_json_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_api_all_json_validate(handler)
    function get_api_all_json_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_api_all_json_invoke(impl; post_invoke=nothing)
    function get_api_all_json_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_api_all_json(req::HTTP.Request;)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_api_product_cycle_json_read(handler)
    function get_api_product_cycle_json_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["product"] = OpenAPI.Servers.to_param(String, path_params, "product", required=true, )
        openapi_params["cycle"] = OpenAPI.Servers.to_param(String, path_params, "cycle", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_api_product_cycle_json_validate(handler)
    function get_api_product_cycle_json_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_api_product_cycle_json_invoke(impl; post_invoke=nothing)
    function get_api_product_cycle_json_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_api_product_cycle_json(req::HTTP.Request, openapi_params["product"], openapi_params["cycle"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_api_product_json_read(handler)
    function get_api_product_json_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["product"] = OpenAPI.Servers.to_param(String, path_params, "product", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_api_product_json_validate(handler)
    function get_api_product_json_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_api_product_json_invoke(impl; post_invoke=nothing)
    function get_api_product_json_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_api_product_json(req::HTTP.Request, openapi_params["product"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerDefaultApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "GET", path_prefix * "/api/all.json", OpenAPI.Servers.middleware(impl, get_api_all_json_read, get_api_all_json_validate, get_api_all_json_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/api/{product}/{cycle}.json", OpenAPI.Servers.middleware(impl, get_api_product_cycle_json_read, get_api_product_cycle_json_validate, get_api_product_cycle_json_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/api/{product}.json", OpenAPI.Servers.middleware(impl, get_api_product_json_read, get_api_product_json_validate, get_api_product_json_invoke; optional_middlewares...))
    return router
end
