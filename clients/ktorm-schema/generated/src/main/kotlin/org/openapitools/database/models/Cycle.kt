/**
* endoflife.date
* Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)
*
* The version of the OpenAPI document: 0.0.1
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
 * @param cycle 
 * @param releaseDate Release Date for the first release in this cycle
 * @param eol 
 * @param latest Latest release in this cycle
 * @param link Link to changelog for the latest release, if available
 * @param lts 
 * @param support 
 * @param discontinued 
 */
object Cycles : BaseTable<Cycle>("cycle") {
    val cycle = long("cycle") /* null */
    val releaseDate = date("releaseDate") /* null */ /* Release Date for the first release in this cycle */
    val eol = long("eol") /* null */
    val latest = text("latest") /* null */ /* Latest release in this cycle */
    val link = text("link") /* null */ /* Link to changelog for the latest release, if available */
    val lts = long("lts") /* null */
    val support = long("support") /* null */
    val discontinued = long("discontinued") /* null */

    /**
     * Create an entity of type Cycle from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = Cycle(
        cycle = CycleCycles.createEntity(row, withReferences) /* CycleCycle? */,
        releaseDate = row[releaseDate]  /* java.time.LocalDate? */ /* Release Date for the first release in this cycle */,
        eol = CycleEols.createEntity(row, withReferences) /* CycleEol? */,
        latest = row[latest]  /* kotlin.String? */ /* Latest release in this cycle */,
        link = row[link]  /* kotlin.String? */ /* Link to changelog for the latest release, if available */,
        lts = CycleLtss.createEntity(row, withReferences) /* CycleLts? */,
        support = CycleSupports.createEntity(row, withReferences) /* CycleSupport? */,
        discontinued = CycleDiscontinueds.createEntity(row, withReferences) /* CycleDiscontinued? */
    )

    /**
    * Assign all the columns from the entity of type Cycle to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = Cycle()
    * database.update(Cycles, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: Cycle) {
        this.apply {
            set(Cycles.cycle, entity.cycle)
            set(Cycles.releaseDate, entity.releaseDate)
            set(Cycles.eol, entity.eol)
            set(Cycles.latest, entity.latest)
            set(Cycles.link, entity.link)
            set(Cycles.lts, entity.lts)
            set(Cycles.support, entity.support)
            set(Cycles.discontinued, entity.discontinued)
        }
    }

}


