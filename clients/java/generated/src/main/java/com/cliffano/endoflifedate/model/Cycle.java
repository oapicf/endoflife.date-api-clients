/*
 * endoflife.date
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cliffano.endoflifedate.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.cliffano.endoflifedate.JSON;

/**
 * Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-16T14:43:00.888961Z[Etc/UTC]")
public class Cycle {
  public static final String SERIALIZED_NAME_CYCLE = "cycle";
  @SerializedName(SERIALIZED_NAME_CYCLE)
  private Object cycle = null;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "releaseDate";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private Object releaseDate = null;

  public static final String SERIALIZED_NAME_EOL = "eol";
  @SerializedName(SERIALIZED_NAME_EOL)
  private Object eol = null;

  public static final String SERIALIZED_NAME_LATEST = "latest";
  @SerializedName(SERIALIZED_NAME_LATEST)
  private Object latest = null;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private Object link = null;

  public static final String SERIALIZED_NAME_LTS = "lts";
  @SerializedName(SERIALIZED_NAME_LTS)
  private Object lts = null;

  public static final String SERIALIZED_NAME_SUPPORT = "support";
  @SerializedName(SERIALIZED_NAME_SUPPORT)
  private Object support = null;

  public static final String SERIALIZED_NAME_DISCONTINUED = "discontinued";
  @SerializedName(SERIALIZED_NAME_DISCONTINUED)
  private Object discontinued = null;

  public Cycle() {
  }

  public Cycle cycle(Object cycle) {

    this.cycle = cycle;
    return this;
  }

   /**
   * Release Cycle
   * @return cycle
  **/
  @javax.annotation.Nullable
  public Object getCycle() {
    return cycle;
  }


  public void setCycle(Object cycle) {
    this.cycle = cycle;
  }


  public Cycle releaseDate(Object releaseDate) {

    this.releaseDate = releaseDate;
    return this;
  }

   /**
   * Release Date for the first release in this cycle
   * @return releaseDate
  **/
  @javax.annotation.Nullable
  public Object getReleaseDate() {
    return releaseDate;
  }


  public void setReleaseDate(Object releaseDate) {
    this.releaseDate = releaseDate;
  }


  public Cycle eol(Object eol) {

    this.eol = eol;
    return this;
  }

   /**
   * End of Life Date for this release cycle
   * @return eol
  **/
  @javax.annotation.Nullable
  public Object getEol() {
    return eol;
  }


  public void setEol(Object eol) {
    this.eol = eol;
  }


  public Cycle latest(Object latest) {

    this.latest = latest;
    return this;
  }

   /**
   * Latest release in this cycle
   * @return latest
  **/
  @javax.annotation.Nullable
  public Object getLatest() {
    return latest;
  }


  public void setLatest(Object latest) {
    this.latest = latest;
  }


  public Cycle link(Object link) {

    this.link = link;
    return this;
  }

   /**
   * Link to changelog for the latest release, if available
   * @return link
  **/
  @javax.annotation.Nullable
  public Object getLink() {
    return link;
  }


  public void setLink(Object link) {
    this.link = link;
  }


  public Cycle lts(Object lts) {

    this.lts = lts;
    return this;
  }

   /**
   * Whether this release cycle has long-term-support (LTS). Can be a date instead in YYYY-MM-DD format as well if the release enters LTS status on a given date.
   * @return lts
  **/
  @javax.annotation.Nullable
  public Object getLts() {
    return lts;
  }


  public void setLts(Object lts) {
    this.lts = lts;
  }


  public Cycle support(Object support) {

    this.support = support;
    return this;
  }

   /**
   * Whether this release cycle has active support
   * @return support
  **/
  @javax.annotation.Nullable
  public Object getSupport() {
    return support;
  }


  public void setSupport(Object support) {
    this.support = support;
  }


  public Cycle discontinued(Object discontinued) {

    this.discontinued = discontinued;
    return this;
  }

   /**
   * Whether this cycle is now discontinued.
   * @return discontinued
  **/
  @javax.annotation.Nullable
  public Object getDiscontinued() {
    return discontinued;
  }


  public void setDiscontinued(Object discontinued) {
    this.discontinued = discontinued;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cycle cycle = (Cycle) o;
    return Objects.equals(this.cycle, cycle.cycle) &&
        Objects.equals(this.releaseDate, cycle.releaseDate) &&
        Objects.equals(this.eol, cycle.eol) &&
        Objects.equals(this.latest, cycle.latest) &&
        Objects.equals(this.link, cycle.link) &&
        Objects.equals(this.lts, cycle.lts) &&
        Objects.equals(this.support, cycle.support) &&
        Objects.equals(this.discontinued, cycle.discontinued);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cycle, releaseDate, eol, latest, link, lts, support, discontinued);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cycle {\n");
    sb.append("    cycle: ").append(toIndentedString(cycle)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    eol: ").append(toIndentedString(eol)).append("\n");
    sb.append("    latest: ").append(toIndentedString(latest)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    lts: ").append(toIndentedString(lts)).append("\n");
    sb.append("    support: ").append(toIndentedString(support)).append("\n");
    sb.append("    discontinued: ").append(toIndentedString(discontinued)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cycle");
    openapiFields.add("releaseDate");
    openapiFields.add("eol");
    openapiFields.add("latest");
    openapiFields.add("link");
    openapiFields.add("lts");
    openapiFields.add("support");
    openapiFields.add("discontinued");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Cycle
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Cycle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cycle is not found in the empty JSON string", Cycle.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Cycle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Cycle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cycle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cycle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cycle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cycle.class));

       return (TypeAdapter<T>) new TypeAdapter<Cycle>() {
           @Override
           public void write(JsonWriter out, Cycle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Cycle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Cycle given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Cycle
  * @throws IOException if the JSON string is invalid with respect to Cycle
  */
  public static Cycle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cycle.class);
  }

 /**
  * Convert an instance of Cycle to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

