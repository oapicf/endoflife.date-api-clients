# #endoflife.date
#
##Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)
#
#The version of the OpenAPI document: 0.0.1
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 7.0.0
#

require "uri"

module OpenAPIClient
  class DefaultApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # All Products
    # Return a list of all products. Each of these can be used for the other API endpoints.
    # @return [Object]
    def get_api_all_json()
      data, _status_code, _headers = get_api_all_json_with_http_info()
      data
    end

    # All Products
    # Return a list of all products. Each of these can be used for the other API endpoints.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_api_all_json_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.get_api_all_json ..."}
      end
      # resource path
      local_var_path = "/api/all.json"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Object"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.get_api_all_json",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#get_api_all_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Object.from_json(data), status_code, headers
    end

    # Single cycle details
    # Gets details of a single cycle
    # @param product [Object] Product URL as per the canonical URL on the endofife.date website
    # @param cycle [Object] Release Cycle for which the details must be fetched
    # @return [Cycle]
    def get_api_product_cycle_json(product : Object, cycle : Object)
      data, _status_code, _headers = get_api_product_cycle_json_with_http_info(product, cycle)
      data
    end

    # Single cycle details
    # Gets details of a single cycle
    # @param product [Object] Product URL as per the canonical URL on the endofife.date website
    # @param cycle [Object] Release Cycle for which the details must be fetched
    # @return [Array<(Cycle, Integer, Hash)>] Cycle data, response status code and response headers
    def get_api_product_cycle_json_with_http_info(product : Object, cycle : Object)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.get_api_product_cycle_json ..."}
      end
      # verify the required parameter "product" is set
      if @api_client.config.client_side_validation && product.nil?
        raise ArgumentError.new("Missing the required parameter 'product' when calling DefaultApi.get_api_product_cycle_json")
      end
      # verify the required parameter "cycle" is set
      if @api_client.config.client_side_validation && cycle.nil?
        raise ArgumentError.new("Missing the required parameter 'cycle' when calling DefaultApi.get_api_product_cycle_json")
      end
      # resource path
      local_var_path = "/api/{product}/{cycle}.json".sub("{" + "product" + "}", URI.encode_path(product.to_s)).sub("{" + "cycle" + "}", URI.encode_path(cycle.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Cycle"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.get_api_product_cycle_json",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#get_api_product_cycle_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Cycle.from_json(data), status_code, headers
    end

    # Get All Details
    # Get EoL dates of all cycles of a given product.
    # @param product [Object] Product URL as per the canonical URL on the endofife.date website
    # @return [Object]
    def get_api_product_json(product : Object)
      data, _status_code, _headers = get_api_product_json_with_http_info(product)
      data
    end

    # Get All Details
    # Get EoL dates of all cycles of a given product.
    # @param product [Object] Product URL as per the canonical URL on the endofife.date website
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_api_product_json_with_http_info(product : Object)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.get_api_product_json ..."}
      end
      # verify the required parameter "product" is set
      if @api_client.config.client_side_validation && product.nil?
        raise ArgumentError.new("Missing the required parameter 'product' when calling DefaultApi.get_api_product_json")
      end
      # resource path
      local_var_path = "/api/{product}.json".sub("{" + "product" + "}", URI.encode_path(product.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Object"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.get_api_product_json",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#get_api_product_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Object.from_json(data), status_code, headers
    end
  end
end
