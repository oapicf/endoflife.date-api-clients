/**
 * endoflife.date
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Cycle model module.
 * @module model/Cycle
 * @version 0.9.0-pre.0
 */
class Cycle {
    /**
     * Constructs a new <code>Cycle</code>.
     * Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
     * @alias module:model/Cycle
     */
    constructor() {

        Cycle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) {
    }

    /**
     * Constructs a <code>Cycle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cycle} obj Optional instance to populate.
     * @return {module:model/Cycle} The populated <code>Cycle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cycle();

            if (data.hasOwnProperty('cycle')) {
                obj['cycle'] = ApiClient.convertToType(data['cycle'], Object);
            }
            if (data.hasOwnProperty('releaseDate')) {
                obj['releaseDate'] = ApiClient.convertToType(data['releaseDate'], Object);
            }
            if (data.hasOwnProperty('eol')) {
                obj['eol'] = ApiClient.convertToType(data['eol'], Object);
            }
            if (data.hasOwnProperty('latest')) {
                obj['latest'] = ApiClient.convertToType(data['latest'], Object);
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], Object);
            }
            if (data.hasOwnProperty('lts')) {
                obj['lts'] = ApiClient.convertToType(data['lts'], Object);
            }
            if (data.hasOwnProperty('support')) {
                obj['support'] = ApiClient.convertToType(data['support'], Object);
            }
            if (data.hasOwnProperty('discontinued')) {
                obj['discontinued'] = ApiClient.convertToType(data['discontinued'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cycle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cycle</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Release Cycle
 * @member {Object} cycle
 */
Cycle.prototype['cycle'] = undefined;

/**
 * Release Date for the first release in this cycle
 * @member {Object} releaseDate
 */
Cycle.prototype['releaseDate'] = undefined;

/**
 * End of Life Date for this release cycle
 * @member {Object} eol
 */
Cycle.prototype['eol'] = undefined;

/**
 * Latest release in this cycle
 * @member {Object} latest
 */
Cycle.prototype['latest'] = undefined;

/**
 * Link to changelog for the latest release, if available
 * @member {Object} link
 */
Cycle.prototype['link'] = undefined;

/**
 * Whether this release cycle has long-term-support (LTS). Can be a date instead in YYYY-MM-DD format as well if the release enters LTS status on a given date.
 * @member {Object} lts
 */
Cycle.prototype['lts'] = undefined;

/**
 * Whether this release cycle has active support
 * @member {Object} support
 */
Cycle.prototype['support'] = undefined;

/**
 * Whether this cycle is now discontinued.
 * @member {Object} discontinued
 */
Cycle.prototype['discontinued'] = undefined;






export default Cycle;

