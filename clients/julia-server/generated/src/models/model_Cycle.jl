# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""cycle
Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.

    Cycle(;
        cycle=nothing,
        releaseDate=nothing,
        eol=nothing,
        latest=nothing,
        link=nothing,
        lts=nothing,
        support=nothing,
        discontinued=nothing,
    )

    - cycle::CycleCycle
    - releaseDate::Date : Release date for the first release in this cycle.
    - eol::CycleEol
    - latest::String : Latest release in this cycle.
    - link::String : Link to changelog for the latest release in this cycle, or null if unavailable.
    - lts::CycleLts
    - support::CycleSupport
    - discontinued::CycleDiscontinued
"""
Base.@kwdef mutable struct Cycle <: OpenAPI.APIModel
    cycle = nothing # spec type: Union{ Nothing, CycleCycle }
    releaseDate::Union{Nothing, Date} = nothing
    eol = nothing # spec type: Union{ Nothing, CycleEol }
    latest::Union{Nothing, String} = nothing
    link::Union{Nothing, String} = nothing
    lts = nothing # spec type: Union{ Nothing, CycleLts }
    support = nothing # spec type: Union{ Nothing, CycleSupport }
    discontinued = nothing # spec type: Union{ Nothing, CycleDiscontinued }

    function Cycle(cycle, releaseDate, eol, latest, link, lts, support, discontinued, )
        OpenAPI.validate_property(Cycle, Symbol("cycle"), cycle)
        OpenAPI.validate_property(Cycle, Symbol("releaseDate"), releaseDate)
        OpenAPI.validate_property(Cycle, Symbol("eol"), eol)
        OpenAPI.validate_property(Cycle, Symbol("latest"), latest)
        OpenAPI.validate_property(Cycle, Symbol("link"), link)
        OpenAPI.validate_property(Cycle, Symbol("lts"), lts)
        OpenAPI.validate_property(Cycle, Symbol("support"), support)
        OpenAPI.validate_property(Cycle, Symbol("discontinued"), discontinued)
        return new(cycle, releaseDate, eol, latest, link, lts, support, discontinued, )
    end
end # type Cycle

const _property_types_Cycle = Dict{Symbol,String}(Symbol("cycle")=>"CycleCycle", Symbol("releaseDate")=>"Date", Symbol("eol")=>"CycleEol", Symbol("latest")=>"String", Symbol("link")=>"String", Symbol("lts")=>"CycleLts", Symbol("support")=>"CycleSupport", Symbol("discontinued")=>"CycleDiscontinued", )
OpenAPI.property_type(::Type{ Cycle }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Cycle[name]))}

function check_required(o::Cycle)
    true
end

function OpenAPI.validate_property(::Type{ Cycle }, name::Symbol, val)


    if name === Symbol("releaseDate")
        OpenAPI.validate_param(name, "Cycle", :format, val, "date")
    end
    if name === Symbol("releaseDate")
        OpenAPI.validate_param(name, "Cycle", :maxLength, val, 10)
        OpenAPI.validate_param(name, "Cycle", :minLength, val, 10)
    end


    if name === Symbol("latest")
        OpenAPI.validate_param(name, "Cycle", :minLength, val, 1)
    end

    if name === Symbol("link")
        OpenAPI.validate_param(name, "Cycle", :minLength, val, 1)
    end



end
