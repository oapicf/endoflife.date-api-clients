/**
 * endoflife.date
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICycle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICycle::OAICycle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICycle::OAICycle() {
    this->initializeModel();
}

OAICycle::~OAICycle() {}

void OAICycle::initializeModel() {

    m_cycle_isSet = false;
    m_cycle_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_eol_isSet = false;
    m_eol_isValid = false;

    m_latest_isSet = false;
    m_latest_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_lts_isSet = false;
    m_lts_isValid = false;

    m_support_isSet = false;
    m_support_isValid = false;

    m_discontinued_isSet = false;
    m_discontinued_isValid = false;
}

void OAICycle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICycle::fromJsonObject(QJsonObject json) {

    m_cycle_isValid = ::OpenAPI::fromJsonValue(m_cycle, json[QString("cycle")]);
    m_cycle_isSet = !json[QString("cycle")].isNull() && m_cycle_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("releaseDate")]);
    m_release_date_isSet = !json[QString("releaseDate")].isNull() && m_release_date_isValid;

    m_eol_isValid = ::OpenAPI::fromJsonValue(m_eol, json[QString("eol")]);
    m_eol_isSet = !json[QString("eol")].isNull() && m_eol_isValid;

    m_latest_isValid = ::OpenAPI::fromJsonValue(m_latest, json[QString("latest")]);
    m_latest_isSet = !json[QString("latest")].isNull() && m_latest_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_lts_isValid = ::OpenAPI::fromJsonValue(m_lts, json[QString("lts")]);
    m_lts_isSet = !json[QString("lts")].isNull() && m_lts_isValid;

    m_support_isValid = ::OpenAPI::fromJsonValue(m_support, json[QString("support")]);
    m_support_isSet = !json[QString("support")].isNull() && m_support_isValid;

    m_discontinued_isValid = ::OpenAPI::fromJsonValue(m_discontinued, json[QString("discontinued")]);
    m_discontinued_isSet = !json[QString("discontinued")].isNull() && m_discontinued_isValid;
}

QString OAICycle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICycle::asJsonObject() const {
    QJsonObject obj;
    if (m_cycle_isSet) {
        obj.insert(QString("cycle"), ::OpenAPI::toJsonValue(m_cycle));
    }
    if (m_release_date_isSet) {
        obj.insert(QString("releaseDate"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_eol_isSet) {
        obj.insert(QString("eol"), ::OpenAPI::toJsonValue(m_eol));
    }
    if (m_latest_isSet) {
        obj.insert(QString("latest"), ::OpenAPI::toJsonValue(m_latest));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_lts_isSet) {
        obj.insert(QString("lts"), ::OpenAPI::toJsonValue(m_lts));
    }
    if (m_support_isSet) {
        obj.insert(QString("support"), ::OpenAPI::toJsonValue(m_support));
    }
    if (m_discontinued_isSet) {
        obj.insert(QString("discontinued"), ::OpenAPI::toJsonValue(m_discontinued));
    }
    return obj;
}

QJsonValue OAICycle::getCycle() const {
    return m_cycle;
}
void OAICycle::setCycle(const QJsonValue &cycle) {
    m_cycle = cycle;
    m_cycle_isSet = true;
}

bool OAICycle::is_cycle_Set() const{
    return m_cycle_isSet;
}

bool OAICycle::is_cycle_Valid() const{
    return m_cycle_isValid;
}

QJsonValue OAICycle::getReleaseDate() const {
    return m_release_date;
}
void OAICycle::setReleaseDate(const QJsonValue &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAICycle::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAICycle::is_release_date_Valid() const{
    return m_release_date_isValid;
}

QJsonValue OAICycle::getEol() const {
    return m_eol;
}
void OAICycle::setEol(const QJsonValue &eol) {
    m_eol = eol;
    m_eol_isSet = true;
}

bool OAICycle::is_eol_Set() const{
    return m_eol_isSet;
}

bool OAICycle::is_eol_Valid() const{
    return m_eol_isValid;
}

QJsonValue OAICycle::getLatest() const {
    return m_latest;
}
void OAICycle::setLatest(const QJsonValue &latest) {
    m_latest = latest;
    m_latest_isSet = true;
}

bool OAICycle::is_latest_Set() const{
    return m_latest_isSet;
}

bool OAICycle::is_latest_Valid() const{
    return m_latest_isValid;
}

QJsonValue OAICycle::getLink() const {
    return m_link;
}
void OAICycle::setLink(const QJsonValue &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAICycle::is_link_Set() const{
    return m_link_isSet;
}

bool OAICycle::is_link_Valid() const{
    return m_link_isValid;
}

QJsonValue OAICycle::getLts() const {
    return m_lts;
}
void OAICycle::setLts(const QJsonValue &lts) {
    m_lts = lts;
    m_lts_isSet = true;
}

bool OAICycle::is_lts_Set() const{
    return m_lts_isSet;
}

bool OAICycle::is_lts_Valid() const{
    return m_lts_isValid;
}

QJsonValue OAICycle::getSupport() const {
    return m_support;
}
void OAICycle::setSupport(const QJsonValue &support) {
    m_support = support;
    m_support_isSet = true;
}

bool OAICycle::is_support_Set() const{
    return m_support_isSet;
}

bool OAICycle::is_support_Valid() const{
    return m_support_isValid;
}

QJsonValue OAICycle::getDiscontinued() const {
    return m_discontinued;
}
void OAICycle::setDiscontinued(const QJsonValue &discontinued) {
    m_discontinued = discontinued;
    m_discontinued_isSet = true;
}

bool OAICycle::is_discontinued_Set() const{
    return m_discontinued_isSet;
}

bool OAICycle::is_discontinued_Valid() const{
    return m_discontinued_isValid;
}

bool OAICycle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discontinued_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICycle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
