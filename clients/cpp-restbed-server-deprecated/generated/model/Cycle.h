/**
 * endoflife.date
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki).
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Cycle.h
 *
 * Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
 */

#ifndef Cycle_H_
#define Cycle_H_



#include "Cycle_support.h"
#include "Cycle_eol.h"
#include <string>
#include "Cycle_cycle.h"
#include "Cycle_discontinued.h"
#include "Cycle_lts.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
/// </summary>
class  Cycle 
{
public:
    Cycle() = default;
    explicit Cycle(boost::property_tree::ptree const& pt);
    virtual ~Cycle() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// Cycle members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Cycle_cycle> getCycle() const;
    void setCycle(std::shared_ptr<Cycle_cycle> value);

    /// <summary>
    /// Release date for the first release in this cycle.
    /// </summary>
    std::string getReleaseDate() const;
    void setReleaseDate(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Cycle_eol> getEol() const;
    void setEol(std::shared_ptr<Cycle_eol> value);

    /// <summary>
    /// Latest release in this cycle.
    /// </summary>
    std::string getLatest() const;
    void setLatest(std::string value);

    /// <summary>
    /// Link to changelog for the latest release in this cycle, or null if unavailable.
    /// </summary>
    std::string getLink() const;
    void setLink(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Cycle_lts> getLts() const;
    void setLts(std::shared_ptr<Cycle_lts> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Cycle_support> getSupport() const;
    void setSupport(std::shared_ptr<Cycle_support> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Cycle_discontinued> getDiscontinued() const;
    void setDiscontinued(std::shared_ptr<Cycle_discontinued> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::shared_ptr<Cycle_cycle> m_Cycle;
    std::string m_ReleaseDate = "";
    std::shared_ptr<Cycle_eol> m_Eol;
    std::string m_Latest = "";
    std::string m_Link = "";
    std::shared_ptr<Cycle_lts> m_Lts;
    std::shared_ptr<Cycle_support> m_Support;
    std::shared_ptr<Cycle_discontinued> m_Discontinued;
};

std::vector<Cycle> createCycleVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* Cycle_H_ */
