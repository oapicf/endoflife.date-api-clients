// <auto-generated>
/*
 * endoflife.date
 *
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki).
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IDefaultApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        DefaultApiEvents Events { get; }

        /// <summary>
        /// All Products
        /// </summary>
        /// <remarks>
        /// Return a list of all products. Each of these can be used for the other API endpoints.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetApiAllJsonApiResponse"/>&gt;</returns>
        Task<IGetApiAllJsonApiResponse> GetApiAllJsonAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// All Products
        /// </summary>
        /// <remarks>
        /// Return a list of all products. Each of these can be used for the other API endpoints.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetApiAllJsonApiResponse"/>?&gt;</returns>
        Task<IGetApiAllJsonApiResponse?> GetApiAllJsonOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Single cycle details
        /// </summary>
        /// <remarks>
        /// Gets details of a single cycle.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">Product URL as per the canonical URL on the endofife.date website.</param>
        /// <param name="cycle">Release Cycle for which the details must be fetched. Any slash character in the cycle name will be replaced with dashes. For example FreeBSD&#39;s releng/14.0 becomes releng-14.0.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetApiProductCycleJsonApiResponse"/>&gt;</returns>
        Task<IGetApiProductCycleJsonApiResponse> GetApiProductCycleJsonAsync(string product, string cycle, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Single cycle details
        /// </summary>
        /// <remarks>
        /// Gets details of a single cycle.
        /// </remarks>
        /// <param name="product">Product URL as per the canonical URL on the endofife.date website.</param>
        /// <param name="cycle">Release Cycle for which the details must be fetched. Any slash character in the cycle name will be replaced with dashes. For example FreeBSD&#39;s releng/14.0 becomes releng-14.0.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetApiProductCycleJsonApiResponse"/>?&gt;</returns>
        Task<IGetApiProductCycleJsonApiResponse?> GetApiProductCycleJsonOrDefaultAsync(string product, string cycle, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get All Details
        /// </summary>
        /// <remarks>
        /// Get EoL dates of all cycles of a given product.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">Product URL as per the canonical URL on the endofife.date website.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetApiProductJsonApiResponse"/>&gt;</returns>
        Task<IGetApiProductJsonApiResponse> GetApiProductJsonAsync(string product, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get All Details
        /// </summary>
        /// <remarks>
        /// Get EoL dates of all cycles of a given product.
        /// </remarks>
        /// <param name="product">Product URL as per the canonical URL on the endofife.date website.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetApiProductJsonApiResponse"/>?&gt;</returns>
        Task<IGetApiProductJsonApiResponse?> GetApiProductJsonOrDefaultAsync(string product, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetApiAllJsonApiResponse"/>
    /// </summary>
    public interface IGetApiAllJsonApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<string>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetApiProductCycleJsonApiResponse"/>
    /// </summary>
    public interface IGetApiProductCycleJsonApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Cycle?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetApiProductJsonApiResponse"/>
    /// </summary>
    public interface IGetApiProductJsonApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<Cycle>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class DefaultApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetApiAllJson;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetApiAllJson;

        internal void ExecuteOnGetApiAllJson(DefaultApi.GetApiAllJsonApiResponse apiResponse)
        {
            OnGetApiAllJson?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetApiAllJson(Exception exception)
        {
            OnErrorGetApiAllJson?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetApiProductCycleJson;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetApiProductCycleJson;

        internal void ExecuteOnGetApiProductCycleJson(DefaultApi.GetApiProductCycleJsonApiResponse apiResponse)
        {
            OnGetApiProductCycleJson?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetApiProductCycleJson(Exception exception)
        {
            OnErrorGetApiProductCycleJson?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetApiProductJson;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetApiProductJson;

        internal void ExecuteOnGetApiProductJson(DefaultApi.GetApiProductJsonApiResponse apiResponse)
        {
            OnGetApiProductJson?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetApiProductJson(Exception exception)
        {
            OnErrorGetApiProductJson?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class DefaultApi : IDefaultApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<DefaultApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public DefaultApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(ILogger<DefaultApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, DefaultApiEvents defaultApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<DefaultApi>();
            HttpClient = httpClient;
            Events = defaultApiEvents;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetApiAllJsonDefaultImplementation(IGetApiAllJsonApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetApiAllJson(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetApiAllJson(ref bool suppressDefaultLog, IGetApiAllJsonApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetApiAllJsonDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetApiAllJson(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetApiAllJson(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// All Products Return a list of all products. Each of these can be used for the other API endpoints.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetApiAllJsonApiResponse"/>&gt;</returns>
        public async Task<IGetApiAllJsonApiResponse?> GetApiAllJsonOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetApiAllJsonAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// All Products Return a list of all products. Each of these can be used for the other API endpoints.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetApiAllJsonApiResponse"/>&gt;</returns>
        public async Task<IGetApiAllJsonApiResponse> GetApiAllJsonAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/api/all.json";

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetApiAllJsonApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetApiAllJsonApiResponse>();

                        GetApiAllJsonApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/all.json", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetApiAllJsonDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetApiAllJson(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetApiAllJsonDefaultImplementation(e, "/api/all.json", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetApiAllJson(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetApiAllJsonApiResponse"/>
        /// </summary>
        public partial class GetApiAllJsonApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetApiAllJsonApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetApiAllJsonApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetApiAllJsonApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetApiAllJsonApiResponse(ILogger<GetApiAllJsonApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<string>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<string>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<string>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetApiProductCycleJson(ref string product, ref string cycle);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="product"></param>
        /// <param name="cycle"></param>
        /// <returns></returns>
        private void ValidateGetApiProductCycleJson(string product, string cycle)
        {
            if (product == null)
                throw new ArgumentNullException(nameof(product));

            if (cycle == null)
                throw new ArgumentNullException(nameof(cycle));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="product"></param>
        /// <param name="cycle"></param>
        private void AfterGetApiProductCycleJsonDefaultImplementation(IGetApiProductCycleJsonApiResponse apiResponseLocalVar, string product, string cycle)
        {
            bool suppressDefaultLog = false;
            AfterGetApiProductCycleJson(ref suppressDefaultLog, apiResponseLocalVar, product, cycle);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="product"></param>
        /// <param name="cycle"></param>
        partial void AfterGetApiProductCycleJson(ref bool suppressDefaultLog, IGetApiProductCycleJsonApiResponse apiResponseLocalVar, string product, string cycle);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="product"></param>
        /// <param name="cycle"></param>
        private void OnErrorGetApiProductCycleJsonDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string product, string cycle)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetApiProductCycleJson(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, product, cycle);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="product"></param>
        /// <param name="cycle"></param>
        partial void OnErrorGetApiProductCycleJson(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string product, string cycle);

        /// <summary>
        /// Single cycle details Gets details of a single cycle.
        /// </summary>
        /// <param name="product">Product URL as per the canonical URL on the endofife.date website.</param>
        /// <param name="cycle">Release Cycle for which the details must be fetched. Any slash character in the cycle name will be replaced with dashes. For example FreeBSD&#39;s releng/14.0 becomes releng-14.0.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetApiProductCycleJsonApiResponse"/>&gt;</returns>
        public async Task<IGetApiProductCycleJsonApiResponse?> GetApiProductCycleJsonOrDefaultAsync(string product, string cycle, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetApiProductCycleJsonAsync(product, cycle, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Single cycle details Gets details of a single cycle.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">Product URL as per the canonical URL on the endofife.date website.</param>
        /// <param name="cycle">Release Cycle for which the details must be fetched. Any slash character in the cycle name will be replaced with dashes. For example FreeBSD&#39;s releng/14.0 becomes releng-14.0.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetApiProductCycleJsonApiResponse"/>&gt;</returns>
        public async Task<IGetApiProductCycleJsonApiResponse> GetApiProductCycleJsonAsync(string product, string cycle, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetApiProductCycleJson(product, cycle);

                FormatGetApiProductCycleJson(ref product, ref cycle);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/api/{product}/{cycle}.json";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bproduct%7D", Uri.EscapeDataString(product.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcycle%7D", Uri.EscapeDataString(cycle.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetApiProductCycleJsonApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetApiProductCycleJsonApiResponse>();

                        GetApiProductCycleJsonApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/{product}/{cycle}.json", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetApiProductCycleJsonDefaultImplementation(apiResponseLocalVar, product, cycle);

                        Events.ExecuteOnGetApiProductCycleJson(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetApiProductCycleJsonDefaultImplementation(e, "/api/{product}/{cycle}.json", uriBuilderLocalVar.Path, product, cycle);
                Events.ExecuteOnErrorGetApiProductCycleJson(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetApiProductCycleJsonApiResponse"/>
        /// </summary>
        public partial class GetApiProductCycleJsonApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetApiProductCycleJsonApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetApiProductCycleJsonApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetApiProductCycleJsonApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetApiProductCycleJsonApiResponse(ILogger<GetApiProductCycleJsonApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Cycle? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Cycle>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Cycle? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetApiProductJson(ref string product);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="product"></param>
        /// <returns></returns>
        private void ValidateGetApiProductJson(string product)
        {
            if (product == null)
                throw new ArgumentNullException(nameof(product));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="product"></param>
        private void AfterGetApiProductJsonDefaultImplementation(IGetApiProductJsonApiResponse apiResponseLocalVar, string product)
        {
            bool suppressDefaultLog = false;
            AfterGetApiProductJson(ref suppressDefaultLog, apiResponseLocalVar, product);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="product"></param>
        partial void AfterGetApiProductJson(ref bool suppressDefaultLog, IGetApiProductJsonApiResponse apiResponseLocalVar, string product);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="product"></param>
        private void OnErrorGetApiProductJsonDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string product)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetApiProductJson(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, product);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="product"></param>
        partial void OnErrorGetApiProductJson(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string product);

        /// <summary>
        /// Get All Details Get EoL dates of all cycles of a given product.
        /// </summary>
        /// <param name="product">Product URL as per the canonical URL on the endofife.date website.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetApiProductJsonApiResponse"/>&gt;</returns>
        public async Task<IGetApiProductJsonApiResponse?> GetApiProductJsonOrDefaultAsync(string product, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetApiProductJsonAsync(product, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get All Details Get EoL dates of all cycles of a given product.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">Product URL as per the canonical URL on the endofife.date website.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetApiProductJsonApiResponse"/>&gt;</returns>
        public async Task<IGetApiProductJsonApiResponse> GetApiProductJsonAsync(string product, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetApiProductJson(product);

                FormatGetApiProductJson(ref product);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/api/{product}.json";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bproduct%7D", Uri.EscapeDataString(product.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetApiProductJsonApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetApiProductJsonApiResponse>();

                        GetApiProductJsonApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/{product}.json", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetApiProductJsonDefaultImplementation(apiResponseLocalVar, product);

                        Events.ExecuteOnGetApiProductJson(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetApiProductJsonDefaultImplementation(e, "/api/{product}.json", uriBuilderLocalVar.Path, product);
                Events.ExecuteOnErrorGetApiProductJson(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetApiProductJsonApiResponse"/>
        /// </summary>
        public partial class GetApiProductJsonApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetApiProductJsonApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetApiProductJsonApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetApiProductJsonApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetApiProductJsonApiResponse(ILogger<GetApiProductJsonApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Cycle>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Cycle>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Cycle>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
