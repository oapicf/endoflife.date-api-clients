/**
 * endoflife.date
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki).
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Cycle.h
 *
 * Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Cycle_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Cycle_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Cycle_cycle.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/Cycle_discontinued.h"
#include "CppRestOpenAPIClient/model/Cycle_eol.h"
#include "CppRestOpenAPIClient/model/Cycle_support.h"
#include "CppRestOpenAPIClient/model/Cycle_lts.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
/// </summary>
class  Cycle
    : public ModelBase
{
public:
    Cycle();
    virtual ~Cycle();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Cycle members


    std::shared_ptr<Cycle_cycle> getCycle() const;
    bool cycleIsSet() const;
    void unsetCycle();
    void setCycle(const std::shared_ptr<Cycle_cycle>& value);

    /// <summary>
    /// Release date for the first release in this cycle.
    /// </summary>
    utility::datetime getReleaseDate() const;
    bool releaseDateIsSet() const;
    void unsetReleaseDate();
    void setReleaseDate(const utility::datetime& value);

    std::shared_ptr<Cycle_eol> getEol() const;
    bool eolIsSet() const;
    void unsetEol();
    void setEol(const std::shared_ptr<Cycle_eol>& value);

    /// <summary>
    /// Latest release in this cycle.
    /// </summary>
    utility::string_t getLatest() const;
    bool latestIsSet() const;
    void unsetLatest();
    void setLatest(const utility::string_t& value);

    /// <summary>
    /// Link to changelog for the latest release in this cycle, or null if unavailable.
    /// </summary>
    utility::string_t getLink() const;
    bool linkIsSet() const;
    void unsetLink();
    void setLink(const utility::string_t& value);

    std::shared_ptr<Cycle_lts> getLts() const;
    bool ltsIsSet() const;
    void unsetLts();
    void setLts(const std::shared_ptr<Cycle_lts>& value);

    std::shared_ptr<Cycle_support> getSupport() const;
    bool supportIsSet() const;
    void unsetSupport();
    void setSupport(const std::shared_ptr<Cycle_support>& value);

    std::shared_ptr<Cycle_discontinued> getDiscontinued() const;
    bool discontinuedIsSet() const;
    void unsetDiscontinued();
    void setDiscontinued(const std::shared_ptr<Cycle_discontinued>& value);


protected:
    std::shared_ptr<Cycle_cycle> m_Cycle;
    bool m_CycleIsSet;

    utility::datetime m_ReleaseDate;
    bool m_ReleaseDateIsSet;

    std::shared_ptr<Cycle_eol> m_Eol;
    bool m_EolIsSet;

    utility::string_t m_Latest;
    bool m_LatestIsSet;

    utility::string_t m_Link;
    bool m_LinkIsSet;

    std::shared_ptr<Cycle_lts> m_Lts;
    bool m_LtsIsSet;

    std::shared_ptr<Cycle_support> m_Support;
    bool m_SupportIsSet;

    std::shared_ptr<Cycle_discontinued> m_Discontinued;
    bool m_DiscontinuedIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Cycle_H_ */
