<?php
/**
 * Cycle
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * endoflife.date
 *
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki).
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * Cycle Class Doc Comment
 *
 * @description Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Cycle implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'cycle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'cycle' => '\OpenAPI\Client\Model\CycleCycle',
        'release_date' => '\DateTime',
        'eol' => '\OpenAPI\Client\Model\CycleEol',
        'latest' => 'string',
        'link' => 'string',
        'lts' => '\OpenAPI\Client\Model\CycleLts',
        'support' => '\OpenAPI\Client\Model\CycleSupport',
        'discontinued' => '\OpenAPI\Client\Model\CycleDiscontinued'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'cycle' => null,
        'release_date' => 'date',
        'eol' => null,
        'latest' => null,
        'link' => null,
        'lts' => null,
        'support' => null,
        'discontinued' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'cycle' => false,
        'release_date' => false,
        'eol' => false,
        'latest' => false,
        'link' => true,
        'lts' => false,
        'support' => false,
        'discontinued' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'cycle' => 'cycle',
        'release_date' => 'releaseDate',
        'eol' => 'eol',
        'latest' => 'latest',
        'link' => 'link',
        'lts' => 'lts',
        'support' => 'support',
        'discontinued' => 'discontinued'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'cycle' => 'setCycle',
        'release_date' => 'setReleaseDate',
        'eol' => 'setEol',
        'latest' => 'setLatest',
        'link' => 'setLink',
        'lts' => 'setLts',
        'support' => 'setSupport',
        'discontinued' => 'setDiscontinued'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'cycle' => 'getCycle',
        'release_date' => 'getReleaseDate',
        'eol' => 'getEol',
        'latest' => 'getLatest',
        'link' => 'getLink',
        'lts' => 'getLts',
        'support' => 'getSupport',
        'discontinued' => 'getDiscontinued'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('cycle', $data ?? [], null);
        $this->setIfExists('release_date', $data ?? [], null);
        $this->setIfExists('eol', $data ?? [], null);
        $this->setIfExists('latest', $data ?? [], null);
        $this->setIfExists('link', $data ?? [], null);
        $this->setIfExists('lts', $data ?? [], null);
        $this->setIfExists('support', $data ?? [], null);
        $this->setIfExists('discontinued', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['release_date']) && (mb_strlen($this->container['release_date']) > 10)) {
            $invalidProperties[] = "invalid value for 'release_date', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['release_date']) && (mb_strlen($this->container['release_date']) < 10)) {
            $invalidProperties[] = "invalid value for 'release_date', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['latest']) && (mb_strlen($this->container['latest']) < 1)) {
            $invalidProperties[] = "invalid value for 'latest', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['link']) && (mb_strlen($this->container['link']) < 1)) {
            $invalidProperties[] = "invalid value for 'link', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cycle
     *
     * @return \OpenAPI\Client\Model\CycleCycle|null
     */
    public function getCycle(): ?\OpenAPI\Client\Model\CycleCycle
    {
        return $this->container['cycle'];
    }

    /**
     * Sets cycle
     *
     * @param \OpenAPI\Client\Model\CycleCycle|null $cycle cycle
     *
     * @return $this
     */
    public function setCycle(?\OpenAPI\Client\Model\CycleCycle $cycle): static
    {
        if (is_null($cycle)) {
            throw new InvalidArgumentException('non-nullable cycle cannot be null');
        }
        $this->container['cycle'] = $cycle;

        return $this;
    }

    /**
     * Gets release_date
     *
     * @return \DateTime|null
     */
    public function getReleaseDate(): ?\DateTime
    {
        return $this->container['release_date'];
    }

    /**
     * Sets release_date
     *
     * @param \DateTime|null $release_date Release date for the first release in this cycle.
     *
     * @return $this
     */
    public function setReleaseDate(?\DateTime $release_date): static
    {
        if (is_null($release_date)) {
            throw new InvalidArgumentException('non-nullable release_date cannot be null');
        }
        if ((mb_strlen($release_date) > 10)) {
            throw new InvalidArgumentException('invalid length for $release_date when calling Cycle., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($release_date) < 10)) {
            throw new InvalidArgumentException('invalid length for $release_date when calling Cycle., must be bigger than or equal to 10.');
        }

        $this->container['release_date'] = $release_date;

        return $this;
    }

    /**
     * Gets eol
     *
     * @return \OpenAPI\Client\Model\CycleEol|null
     */
    public function getEol(): ?\OpenAPI\Client\Model\CycleEol
    {
        return $this->container['eol'];
    }

    /**
     * Sets eol
     *
     * @param \OpenAPI\Client\Model\CycleEol|null $eol eol
     *
     * @return $this
     */
    public function setEol(?\OpenAPI\Client\Model\CycleEol $eol): static
    {
        if (is_null($eol)) {
            throw new InvalidArgumentException('non-nullable eol cannot be null');
        }
        $this->container['eol'] = $eol;

        return $this;
    }

    /**
     * Gets latest
     *
     * @return string|null
     */
    public function getLatest(): ?string
    {
        return $this->container['latest'];
    }

    /**
     * Sets latest
     *
     * @param string|null $latest Latest release in this cycle.
     *
     * @return $this
     */
    public function setLatest(?string $latest): static
    {
        if (is_null($latest)) {
            throw new InvalidArgumentException('non-nullable latest cannot be null');
        }

        if ((mb_strlen($latest) < 1)) {
            throw new InvalidArgumentException('invalid length for $latest when calling Cycle., must be bigger than or equal to 1.');
        }

        $this->container['latest'] = $latest;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string|null
     */
    public function getLink(): ?string
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string|null $link Link to changelog for the latest release in this cycle, or null if unavailable.
     *
     * @return $this
     */
    public function setLink(?string $link): static
    {
        if (is_null($link)) {
            array_push($this->openAPINullablesSetToNull, 'link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($link) && (mb_strlen($link) < 1)) {
            throw new InvalidArgumentException('invalid length for $link when calling Cycle., must be bigger than or equal to 1.');
        }

        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets lts
     *
     * @return \OpenAPI\Client\Model\CycleLts|null
     */
    public function getLts(): ?\OpenAPI\Client\Model\CycleLts
    {
        return $this->container['lts'];
    }

    /**
     * Sets lts
     *
     * @param \OpenAPI\Client\Model\CycleLts|null $lts lts
     *
     * @return $this
     */
    public function setLts(?\OpenAPI\Client\Model\CycleLts $lts): static
    {
        if (is_null($lts)) {
            throw new InvalidArgumentException('non-nullable lts cannot be null');
        }
        $this->container['lts'] = $lts;

        return $this;
    }

    /**
     * Gets support
     *
     * @return \OpenAPI\Client\Model\CycleSupport|null
     */
    public function getSupport(): ?\OpenAPI\Client\Model\CycleSupport
    {
        return $this->container['support'];
    }

    /**
     * Sets support
     *
     * @param \OpenAPI\Client\Model\CycleSupport|null $support support
     *
     * @return $this
     */
    public function setSupport(?\OpenAPI\Client\Model\CycleSupport $support): static
    {
        if (is_null($support)) {
            throw new InvalidArgumentException('non-nullable support cannot be null');
        }
        $this->container['support'] = $support;

        return $this;
    }

    /**
     * Gets discontinued
     *
     * @return \OpenAPI\Client\Model\CycleDiscontinued|null
     */
    public function getDiscontinued(): ?\OpenAPI\Client\Model\CycleDiscontinued
    {
        return $this->container['discontinued'];
    }

    /**
     * Sets discontinued
     *
     * @param \OpenAPI\Client\Model\CycleDiscontinued|null $discontinued discontinued
     *
     * @return $this
     */
    public function setDiscontinued(?\OpenAPI\Client\Model\CycleDiscontinued $discontinued): static
    {
        if (is_null($discontinued)) {
            throw new InvalidArgumentException('non-nullable discontinued cannot be null');
        }
        $this->container['discontinued'] = $discontinued;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


