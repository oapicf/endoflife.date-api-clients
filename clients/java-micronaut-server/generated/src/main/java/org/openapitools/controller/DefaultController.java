/*
 * endoflife.date
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.controller;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import reactor.core.publisher.Mono;
import io.micronaut.http.HttpStatus;
import io.micronaut.http.exceptions.HttpStatusException;
import org.openapitools.model.Cycle;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-11-04T23:47:43.661706761Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Controller
@Tag(name = "Default", description = "The Default API")
public class DefaultController {
    /**
     * All Products
     * Return a list of all products. Each of these can be used for the other API endpoints.
     *
     * @return List&lt;String&gt;
     */
    @Operation(
        operationId = "getApiAllJson",
        summary = "All Products",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @Get(uri="/api/all.json")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<List<String>> getApiAllJson() {
        // TODO implement getApiAllJson();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Single cycle details
     * Gets details of a single cycle
     *
     * @param product Product URL as per the canonical URL on the endofife.date website (required)
     * @param cycle Release Cycle for which the details must be fetched. Any slash character in the cycle name will be replaced with dashes. For example FreeBSD&#39;s releng/14.0 becomes releng-14.0. (required)
     * @return Cycle
     */
    @Operation(
        operationId = "getApiProductCycleJson",
        summary = "Single cycle details",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Cycle.class))
            })
        },
        parameters = {
            @Parameter(name = "product", description = "Product URL as per the canonical URL on the endofife.date website", required = true),
            @Parameter(name = "cycle", description = "Release Cycle for which the details must be fetched. Any slash character in the cycle name will be replaced with dashes. For example FreeBSD's releng/14.0 becomes releng-14.0.", required = true)
        }
    )
    @Get(uri="/api/{product}/{cycle}.json")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<Cycle> getApiProductCycleJson(
        @PathVariable(value="product") @NotNull String product, 
        @PathVariable(value="cycle") @NotNull String cycle
    ) {
        // TODO implement getApiProductCycleJson();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Get All Details
     * Get EoL dates of all cycles of a given product.
     *
     * @param product Product URL as per the canonical URL on the endofife.date website (required)
     * @return List&lt;Cycle&gt;
     */
    @Operation(
        operationId = "getApiProductJson",
        summary = "Get All Details",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Cycle.class))
            })
        },
        parameters = {
            @Parameter(name = "product", description = "Product URL as per the canonical URL on the endofife.date website", required = true)
        }
    )
    @Get(uri="/api/{product}.json")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<List<Cycle>> getApiProductJson(
        @PathVariable(value="product") @NotNull String product
    ) {
        // TODO implement getApiProductJson();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }

}
