/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.mockserver.api;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.http.Fault;

public class DefaultApiMockServer {

    public static MappingBuilder stubGetApiAllJson200(String response) {
        MappingBuilder stub = get(urlPathEqualTo("/api/all.json"))
            .withHeader("Accept", havingExactly("application/json"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetApiAllJsonFault(Fault fault) {
        MappingBuilder stub = get(urlPathEqualTo("/api/all.json"))
            .withHeader("Accept", havingExactly("application/json"))
            .willReturn(aResponse()
                .withFault(fault)
            );


        return stub;
    }

    public static String getApiAllJson200ResponseSample1() {
        return "[ \"\", \"\" ]";
    }



    public static MappingBuilder stubGetApiProductCycleJson200(@javax.annotation.Nonnull String product, @javax.annotation.Nonnull String cycle, String response) {
        MappingBuilder stub = get(urlPathTemplate("/api/{product}/{cycle}.json"))
            .withHeader("Accept", havingExactly("application/json"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("product", equalTo(product));
        stub = stub.withPathParam("cycle", equalTo(cycle));

        return stub;
    }

    public static MappingBuilder stubGetApiProductCycleJsonFault(@javax.annotation.Nonnull String product, @javax.annotation.Nonnull String cycle, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/api/{product}/{cycle}.json"))
            .withHeader("Accept", havingExactly("application/json"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("product", equalTo(product));
        stub = stub.withPathParam("cycle", equalTo(cycle));

        return stub;
    }

    public static String getApiProductCycleJson200ResponseSample1() {
        return "{ \"eol\" : \"cycle_eol\", \"releaseDate\" : \"2000-01-23\", \"link\" : \"link\", \"lts\" : \"cycle_lts\", \"discontinued\" : \"cycle_discontinued\", \"cycle\" : 0.8008281904610115, \"support\" : \"cycle_support\", \"latest\" : \"latest\" }";
    }



    public static MappingBuilder stubGetApiProductJson200(@javax.annotation.Nonnull String product, String response) {
        MappingBuilder stub = get(urlPathTemplate("/api/{product}.json"))
            .withHeader("Accept", havingExactly("application/json"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("product", equalTo(product));

        return stub;
    }

    public static MappingBuilder stubGetApiProductJsonFault(@javax.annotation.Nonnull String product, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/api/{product}.json"))
            .withHeader("Accept", havingExactly("application/json"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("product", equalTo(product));

        return stub;
    }

    public static String getApiProductJson200ResponseSample1() {
        return "[ { \"eol\" : \"cycle_eol\", \"releaseDate\" : \"2000-01-23\", \"link\" : \"link\", \"lts\" : \"cycle_lts\", \"discontinued\" : \"cycle_discontinued\", \"cycle\" : 0.8008281904610115, \"support\" : \"cycle_support\", \"latest\" : \"latest\" }, { \"eol\" : \"cycle_eol\", \"releaseDate\" : \"2000-01-23\", \"link\" : \"link\", \"lts\" : \"cycle_lts\", \"discontinued\" : \"cycle_discontinued\", \"cycle\" : 0.8008281904610115, \"support\" : \"cycle_support\", \"latest\" : \"latest\" } ]";
    }



}
