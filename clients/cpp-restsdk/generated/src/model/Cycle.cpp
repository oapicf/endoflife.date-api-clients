/**
 * endoflife.date
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki).
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Cycle.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Cycle::Cycle()
{
    m_CycleIsSet = false;
    m_ReleaseDateIsSet = false;
    m_EolIsSet = false;
    m_Latest = utility::conversions::to_string_t("");
    m_LatestIsSet = false;
    m_Link = utility::conversions::to_string_t("");
    m_LinkIsSet = false;
    m_LtsIsSet = false;
    m_SupportIsSet = false;
    m_DiscontinuedIsSet = false;
}

Cycle::~Cycle()
{
}

void Cycle::validate()
{
    // TODO: implement validation
}

web::json::value Cycle::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_CycleIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("cycle"))] = ModelBase::toJson(m_Cycle);
    }
    if(m_ReleaseDateIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("releaseDate"))] = ModelBase::toJson(m_ReleaseDate);
    }
    if(m_EolIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("eol"))] = ModelBase::toJson(m_Eol);
    }
    if(m_LatestIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("latest"))] = ModelBase::toJson(m_Latest);
    }
    if(m_LinkIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("link"))] = ModelBase::toJson(m_Link);
    }
    if(m_LtsIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("lts"))] = ModelBase::toJson(m_Lts);
    }
    if(m_SupportIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("support"))] = ModelBase::toJson(m_Support);
    }
    if(m_DiscontinuedIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("discontinued"))] = ModelBase::toJson(m_Discontinued);
    }

    return val;
}

bool Cycle::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("cycle"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cycle")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Cycle_cycle> refVal_setCycle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCycle);
            setCycle(refVal_setCycle);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("releaseDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("releaseDate")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setReleaseDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReleaseDate);
            setReleaseDate(refVal_setReleaseDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("eol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("eol")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Cycle_eol> refVal_setEol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEol);
            setEol(refVal_setEol);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("latest"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("latest")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLatest;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLatest);
            setLatest(refVal_setLatest);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("link")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLink);
            setLink(refVal_setLink);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lts")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Cycle_lts> refVal_setLts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLts);
            setLts(refVal_setLts);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("support"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("support")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Cycle_support> refVal_setSupport;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupport);
            setSupport(refVal_setSupport);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("discontinued"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("discontinued")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Cycle_discontinued> refVal_setDiscontinued;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDiscontinued);
            setDiscontinued(refVal_setDiscontinued);
            
        }
    }
    return ok;
}

void Cycle::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CycleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cycle")), m_Cycle));
    }
    if(m_ReleaseDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("releaseDate")), m_ReleaseDate));
    }
    if(m_EolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("eol")), m_Eol));
    }
    if(m_LatestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("latest")), m_Latest));
    }
    if(m_LinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("link")), m_Link));
    }
    if(m_LtsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lts")), m_Lts));
    }
    if(m_SupportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("support")), m_Support));
    }
    if(m_DiscontinuedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("discontinued")), m_Discontinued));
    }
}

bool Cycle::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("cycle"))))
    {
        std::shared_ptr<Cycle_cycle> refVal_setCycle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cycle"))), refVal_setCycle );
        setCycle(refVal_setCycle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("releaseDate"))))
    {
        utility::datetime refVal_setReleaseDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("releaseDate"))), refVal_setReleaseDate );
        setReleaseDate(refVal_setReleaseDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("eol"))))
    {
        std::shared_ptr<Cycle_eol> refVal_setEol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("eol"))), refVal_setEol );
        setEol(refVal_setEol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("latest"))))
    {
        utility::string_t refVal_setLatest;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("latest"))), refVal_setLatest );
        setLatest(refVal_setLatest);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("link"))))
    {
        utility::string_t refVal_setLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("link"))), refVal_setLink );
        setLink(refVal_setLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lts"))))
    {
        std::shared_ptr<Cycle_lts> refVal_setLts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lts"))), refVal_setLts );
        setLts(refVal_setLts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("support"))))
    {
        std::shared_ptr<Cycle_support> refVal_setSupport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("support"))), refVal_setSupport );
        setSupport(refVal_setSupport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("discontinued"))))
    {
        std::shared_ptr<Cycle_discontinued> refVal_setDiscontinued;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("discontinued"))), refVal_setDiscontinued );
        setDiscontinued(refVal_setDiscontinued);
    }
    return ok;
}


std::shared_ptr<Cycle_cycle> Cycle::getCycle() const
{
    return m_Cycle;
}


void Cycle::setCycle(const std::shared_ptr<Cycle_cycle>& value)
{
    m_Cycle = value;
    m_CycleIsSet = true;
}

bool Cycle::cycleIsSet() const
{
    return m_CycleIsSet;
}

void Cycle::unsetCycle()
{
    m_CycleIsSet = false;
}
utility::datetime Cycle::getReleaseDate() const
{
    return m_ReleaseDate;
}


void Cycle::setReleaseDate(const utility::datetime& value)
{
    m_ReleaseDate = value;
    m_ReleaseDateIsSet = true;
}

bool Cycle::releaseDateIsSet() const
{
    return m_ReleaseDateIsSet;
}

void Cycle::unsetReleaseDate()
{
    m_ReleaseDateIsSet = false;
}
std::shared_ptr<Cycle_eol> Cycle::getEol() const
{
    return m_Eol;
}


void Cycle::setEol(const std::shared_ptr<Cycle_eol>& value)
{
    m_Eol = value;
    m_EolIsSet = true;
}

bool Cycle::eolIsSet() const
{
    return m_EolIsSet;
}

void Cycle::unsetEol()
{
    m_EolIsSet = false;
}
utility::string_t Cycle::getLatest() const
{
    return m_Latest;
}


void Cycle::setLatest(const utility::string_t& value)
{
    m_Latest = value;
    m_LatestIsSet = true;
}

bool Cycle::latestIsSet() const
{
    return m_LatestIsSet;
}

void Cycle::unsetLatest()
{
    m_LatestIsSet = false;
}
utility::string_t Cycle::getLink() const
{
    return m_Link;
}


void Cycle::setLink(const utility::string_t& value)
{
    m_Link = value;
    m_LinkIsSet = true;
}

bool Cycle::linkIsSet() const
{
    return m_LinkIsSet;
}

void Cycle::unsetLink()
{
    m_LinkIsSet = false;
}
std::shared_ptr<Cycle_lts> Cycle::getLts() const
{
    return m_Lts;
}


void Cycle::setLts(const std::shared_ptr<Cycle_lts>& value)
{
    m_Lts = value;
    m_LtsIsSet = true;
}

bool Cycle::ltsIsSet() const
{
    return m_LtsIsSet;
}

void Cycle::unsetLts()
{
    m_LtsIsSet = false;
}
std::shared_ptr<Cycle_support> Cycle::getSupport() const
{
    return m_Support;
}


void Cycle::setSupport(const std::shared_ptr<Cycle_support>& value)
{
    m_Support = value;
    m_SupportIsSet = true;
}

bool Cycle::supportIsSet() const
{
    return m_SupportIsSet;
}

void Cycle::unsetSupport()
{
    m_SupportIsSet = false;
}
std::shared_ptr<Cycle_discontinued> Cycle::getDiscontinued() const
{
    return m_Discontinued;
}


void Cycle::setDiscontinued(const std::shared_ptr<Cycle_discontinued>& value)
{
    m_Discontinued = value;
    m_DiscontinuedIsSet = true;
}

bool Cycle::discontinuedIsSet() const
{
    return m_DiscontinuedIsSet;
}

void Cycle::unsetDiscontinued()
{
    m_DiscontinuedIsSet = false;
}

}
}
}
}


