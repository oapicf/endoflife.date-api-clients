/**
 * endoflife.date
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki).
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "DefaultApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

DefaultApiException::DefaultApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int DefaultApiException::getStatus() const
{
    return m_status;
}
const char* DefaultApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
std::shared_ptr<MODEL_T> extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = std::make_shared<MODEL_T>(pt);
    return model;
}

template<class MODEL_T>
std::vector<std::shared_ptr<MODEL_T>> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<std::shared_ptr<MODEL_T>>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(std::make_shared<MODEL_T>(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

DefaultApiApiAll.jsonResource::DefaultApiApiAll.jsonResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/api/all.json/");
	this->set_method_handler("GET",
		std::bind(&DefaultApiApiAll.jsonResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DefaultApiApiAll.jsonResource::~DefaultApiApiAll.jsonResource()
{
}

std::pair<int, std::string> DefaultApiApiAll.jsonResource::handleDefaultApiException(const DefaultApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DefaultApiApiAll.jsonResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DefaultApiApiAll.jsonResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DefaultApiApiAll.jsonResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DefaultApiApiAll.jsonResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DefaultApiApiAll.jsonResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DefaultApiApiAll.jsonResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();




    int status_code = 500;
    std::vector<std::string> resultObject = std::vector<std::shared_ptr<std::string>>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET();
    }
    catch(const DefaultApiException& e) {
        std::tie(status_code, result) = handleDefaultApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "OK" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::vector<std::string>> DefaultApiApiAll.jsonResource::handler_GET(
        )
{
    throw DefaultApiException(501, "Not implemented");
}


std::string DefaultApiApiAll.jsonResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DefaultApiApiProduct{cycle}.jsonResource::DefaultApiApiProduct{cycle}.jsonResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/api/{product: .*}/{cycle}.json/");
	this->set_method_handler("GET",
		std::bind(&DefaultApiApiProduct{cycle}.jsonResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DefaultApiApiProduct{cycle}.jsonResource::~DefaultApiApiProduct{cycle}.jsonResource()
{
}

std::pair<int, std::string> DefaultApiApiProduct{cycle}.jsonResource::handleDefaultApiException(const DefaultApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DefaultApiApiProduct{cycle}.jsonResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DefaultApiApiProduct{cycle}.jsonResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DefaultApiApiProduct{cycle}.jsonResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DefaultApiApiProduct{cycle}.jsonResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DefaultApiApiProduct{cycle}.jsonResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DefaultApiApiProduct{cycle}.jsonResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string product = getPathParam_product(request);
    const std::string cycle = getPathParam_cycle(request);



    int status_code = 500;
    std::shared_ptr<Cycle> resultObject = std::make_shared<Cycle>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(product, cycle);
    }
    catch(const DefaultApiException& e) {
        std::tie(status_code, result) = handleDefaultApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "OK" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<Cycle>> DefaultApiApiProduct{cycle}.jsonResource::handler_GET(
        std::string const & product, std::string const & cycle)
{
    throw DefaultApiException(501, "Not implemented");
}


std::string DefaultApiApiProduct{cycle}.jsonResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
DefaultApiApi{product}.jsonResource::DefaultApiApi{product}.jsonResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/api/{product}.json/");
	this->set_method_handler("GET",
		std::bind(&DefaultApiApi{product}.jsonResource::handler_GET_internal, this,
			std::placeholders::_1));
}

DefaultApiApi{product}.jsonResource::~DefaultApiApi{product}.jsonResource()
{
}

std::pair<int, std::string> DefaultApiApi{product}.jsonResource::handleDefaultApiException(const DefaultApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> DefaultApiApi{product}.jsonResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> DefaultApiApi{product}.jsonResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void DefaultApiApi{product}.jsonResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void DefaultApiApi{product}.jsonResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void DefaultApiApi{product}.jsonResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void DefaultApiApi{product}.jsonResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string product = getPathParam_product(request);



    int status_code = 500;
    std::vector<std::shared_ptr<Cycle>> resultObject = std::vector<std::shared_ptr<Cycle>>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(product);
    }
    catch(const DefaultApiException& e) {
        std::tie(status_code, result) = handleDefaultApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "OK" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::vector<std::shared_ptr<Cycle>>> DefaultApiApi{product}.jsonResource::handler_GET(
        std::string const & product)
{
    throw DefaultApiException(501, "Not implemented");
}


std::string DefaultApiApi{product}.jsonResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

DefaultApi::DefaultApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

DefaultApi::~DefaultApi() {}

void DefaultApi::setDefaultApiApiAll.jsonResource(std::shared_ptr<DefaultApiApiAll.jsonResource> spDefaultApiApiAll.jsonResource) {
    m_spDefaultApiApiAll.jsonResource = spDefaultApiApiAll.jsonResource;
    m_service->publish(m_spDefaultApiApiAll.jsonResource);
}
void DefaultApi::setDefaultApiApiProduct{cycle}.jsonResource(std::shared_ptr<DefaultApiApiProduct{cycle}.jsonResource> spDefaultApiApiProduct{cycle}.jsonResource) {
    m_spDefaultApiApiProduct{cycle}.jsonResource = spDefaultApiApiProduct{cycle}.jsonResource;
    m_service->publish(m_spDefaultApiApiProduct{cycle}.jsonResource);
}
void DefaultApi::setDefaultApiApi{product}.jsonResource(std::shared_ptr<DefaultApiApi{product}.jsonResource> spDefaultApiApi{product}.jsonResource) {
    m_spDefaultApiApi{product}.jsonResource = spDefaultApiApi{product}.jsonResource;
    m_service->publish(m_spDefaultApiApi{product}.jsonResource);
}


void DefaultApi::publishDefaultResources() {
    if (!m_spDefaultApiApiAll.jsonResource) {
        setDefaultApiApiAll.jsonResource(std::make_shared<DefaultApiApiAll.jsonResource>());
    }
    if (!m_spDefaultApiApiProduct{cycle}.jsonResource) {
        setDefaultApiApiProduct{cycle}.jsonResource(std::make_shared<DefaultApiApiProduct{cycle}.jsonResource>());
    }
    if (!m_spDefaultApiApi{product}.jsonResource) {
        setDefaultApiApi{product}.jsonResource(std::make_shared<DefaultApiApi{product}.jsonResource>());
    }
}

std::shared_ptr<restbed::Service> DefaultApi::service() {
    return m_service;
}


}
}
}
}

