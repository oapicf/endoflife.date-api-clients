{-
   endoflife.date
   Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)

   The version of the OpenAPI document: 0.0.1
   Contact: blah+oapicf@cliffano.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( Cycle
    , CycleCycle
    , CycleDiscontinued
    , CycleEol
    , CycleLts
    , CycleSupport
    , encodeCycle
    , encodeCycleCycle
    , encodeCycleDiscontinued
    , encodeCycleEol
    , encodeCycleLts
    , encodeCycleSupport
    , cycleDecoder
    , cycleCycleDecoder
    , cycleDiscontinuedDecoder
    , cycleEolDecoder
    , cycleLtsDecoder
    , cycleSupportDecoder
    )

import Api
import Api.Time exposing (Posix)
import Dict
import Json.Decode
import Json.Encode


-- MODEL


{-| Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
-}
type alias Cycle =
    { cycle : Maybe CycleCycle
    , releaseDate : Maybe Posix
    , eol : Maybe CycleEol
    , latest : Maybe String
    , link : Maybe String
    , lts : Maybe CycleLts
    , support : Maybe CycleSupport
    , discontinued : Maybe CycleDiscontinued
    }


{-| Release Cycle
-}
type alias CycleCycle =
    { }


{-| Whether this cycle is now discontinued.
-}
type alias CycleDiscontinued =
    { }


{-| End of Life Date for this release cycle
-}
type alias CycleEol =
    { }


{-| Whether this release cycle has long-term-support (LTS). Can be a date instead in YYYY-MM-DD format as well if the release enters LTS status on a given date. 
-}
type alias CycleLts =
    { }


{-| Whether this release cycle has active support
-}
type alias CycleSupport =
    { }


-- ENCODER


encodeCycle : Cycle -> Json.Encode.Value
encodeCycle =
    encodeObject << encodeCyclePairs


encodeCycleWithTag : ( String, String ) -> Cycle -> Json.Encode.Value
encodeCycleWithTag (tagField, tag) model =
    encodeObject (encodeCyclePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCyclePairs : Cycle -> List EncodedField
encodeCyclePairs model =
    let
        pairs =
            [ maybeEncode "cycle" encodeCycleCycle model.cycle
            , maybeEncode "releaseDate" Api.Time.encodeDate model.releaseDate
            , maybeEncode "eol" encodeCycleEol model.eol
            , maybeEncode "latest" Json.Encode.string model.latest
            , maybeEncodeNullable "link" Json.Encode.string model.link
            , maybeEncode "lts" encodeCycleLts model.lts
            , maybeEncode "support" encodeCycleSupport model.support
            , maybeEncode "discontinued" encodeCycleDiscontinued model.discontinued
            ]
    in
    pairs


encodeCycleCycle : CycleCycle -> Json.Encode.Value
encodeCycleCycle =
    encodeObject << encodeCycleCyclePairs


encodeCycleCycleWithTag : ( String, String ) -> CycleCycle -> Json.Encode.Value
encodeCycleCycleWithTag (tagField, tag) model =
    encodeObject (encodeCycleCyclePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCycleCyclePairs : CycleCycle -> List EncodedField
encodeCycleCyclePairs model =
    let
        pairs =
            ]
    in
    pairs


encodeCycleDiscontinued : CycleDiscontinued -> Json.Encode.Value
encodeCycleDiscontinued =
    encodeObject << encodeCycleDiscontinuedPairs


encodeCycleDiscontinuedWithTag : ( String, String ) -> CycleDiscontinued -> Json.Encode.Value
encodeCycleDiscontinuedWithTag (tagField, tag) model =
    encodeObject (encodeCycleDiscontinuedPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCycleDiscontinuedPairs : CycleDiscontinued -> List EncodedField
encodeCycleDiscontinuedPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeCycleEol : CycleEol -> Json.Encode.Value
encodeCycleEol =
    encodeObject << encodeCycleEolPairs


encodeCycleEolWithTag : ( String, String ) -> CycleEol -> Json.Encode.Value
encodeCycleEolWithTag (tagField, tag) model =
    encodeObject (encodeCycleEolPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCycleEolPairs : CycleEol -> List EncodedField
encodeCycleEolPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeCycleLts : CycleLts -> Json.Encode.Value
encodeCycleLts =
    encodeObject << encodeCycleLtsPairs


encodeCycleLtsWithTag : ( String, String ) -> CycleLts -> Json.Encode.Value
encodeCycleLtsWithTag (tagField, tag) model =
    encodeObject (encodeCycleLtsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCycleLtsPairs : CycleLts -> List EncodedField
encodeCycleLtsPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeCycleSupport : CycleSupport -> Json.Encode.Value
encodeCycleSupport =
    encodeObject << encodeCycleSupportPairs


encodeCycleSupportWithTag : ( String, String ) -> CycleSupport -> Json.Encode.Value
encodeCycleSupportWithTag (tagField, tag) model =
    encodeObject (encodeCycleSupportPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCycleSupportPairs : CycleSupport -> List EncodedField
encodeCycleSupportPairs model =
    let
        pairs =
            ]
    in
    pairs


-- DECODER


cycleDecoder : Json.Decode.Decoder Cycle
cycleDecoder =
    Json.Decode.succeed Cycle
        |> maybeDecode "cycle" cycleCycleDecoder Nothing
        |> maybeDecode "releaseDate" Api.Time.dateDecoder Nothing
        |> maybeDecode "eol" cycleEolDecoder Nothing
        |> maybeDecode "latest" Json.Decode.string Nothing
        |> maybeDecodeNullable "link" Json.Decode.string Nothing
        |> maybeDecode "lts" cycleLtsDecoder Nothing
        |> maybeDecode "support" cycleSupportDecoder Nothing
        |> maybeDecode "discontinued" cycleDiscontinuedDecoder Nothing


cycleCycleDecoder : Json.Decode.Decoder CycleCycle
cycleCycleDecoder =
    Json.Decode.succeed CycleCycle


cycleDiscontinuedDecoder : Json.Decode.Decoder CycleDiscontinued
cycleDiscontinuedDecoder =
    Json.Decode.succeed CycleDiscontinued


cycleEolDecoder : Json.Decode.Decoder CycleEol
cycleEolDecoder =
    Json.Decode.succeed CycleEol


cycleLtsDecoder : Json.Decode.Decoder CycleLts
cycleLtsDecoder =
    Json.Decode.succeed CycleLts


cycleSupportDecoder : Json.Decode.Decoder CycleSupport
cycleSupportDecoder =
    Json.Decode.succeed CycleSupport




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f