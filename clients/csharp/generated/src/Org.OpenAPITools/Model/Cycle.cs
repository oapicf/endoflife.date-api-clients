/*
 * endoflife.date
 *
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
    /// </summary>
    [DataContract(Name = "cycle")]
    public partial class Cycle : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cycle" /> class.
        /// </summary>
        /// <param name="varCycle">varCycle.</param>
        /// <param name="releaseDate">Release Date for the first release in this cycle.</param>
        /// <param name="eol">eol.</param>
        /// <param name="latest">Latest release in this cycle.</param>
        /// <param name="link">Link to changelog for the latest release, if available.</param>
        /// <param name="lts">lts.</param>
        /// <param name="support">support.</param>
        /// <param name="discontinued">discontinued.</param>
        public Cycle(CycleCycle varCycle = default(CycleCycle), DateOnly releaseDate = default(DateOnly), CycleEol eol = default(CycleEol), string latest = default(string), string link = default(string), CycleLts lts = default(CycleLts), CycleSupport support = default(CycleSupport), CycleDiscontinued discontinued = default(CycleDiscontinued))
        {
            this.VarCycle = varCycle;
            this.ReleaseDate = releaseDate;
            this.Eol = eol;
            this.Latest = latest;
            this.Link = link;
            this.Lts = lts;
            this.Support = support;
            this.Discontinued = discontinued;
        }

        /// <summary>
        /// Gets or Sets VarCycle
        /// </summary>
        [DataMember(Name = "cycle", EmitDefaultValue = false)]
        public CycleCycle VarCycle { get; set; }

        /// <summary>
        /// Release Date for the first release in this cycle
        /// </summary>
        /// <value>Release Date for the first release in this cycle</value>
        [DataMember(Name = "releaseDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateOnly ReleaseDate { get; set; }

        /// <summary>
        /// Gets or Sets Eol
        /// </summary>
        [DataMember(Name = "eol", EmitDefaultValue = false)]
        public CycleEol Eol { get; set; }

        /// <summary>
        /// Latest release in this cycle
        /// </summary>
        /// <value>Latest release in this cycle</value>
        [DataMember(Name = "latest", EmitDefaultValue = false)]
        public string Latest { get; set; }

        /// <summary>
        /// Link to changelog for the latest release, if available
        /// </summary>
        /// <value>Link to changelog for the latest release, if available</value>
        [DataMember(Name = "link", EmitDefaultValue = true)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets Lts
        /// </summary>
        [DataMember(Name = "lts", EmitDefaultValue = false)]
        public CycleLts Lts { get; set; }

        /// <summary>
        /// Gets or Sets Support
        /// </summary>
        [DataMember(Name = "support", EmitDefaultValue = false)]
        public CycleSupport Support { get; set; }

        /// <summary>
        /// Gets or Sets Discontinued
        /// </summary>
        [DataMember(Name = "discontinued", EmitDefaultValue = false)]
        public CycleDiscontinued Discontinued { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Cycle {\n");
            sb.Append("  VarCycle: ").Append(VarCycle).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  Eol: ").Append(Eol).Append("\n");
            sb.Append("  Latest: ").Append(Latest).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Lts: ").Append(Lts).Append("\n");
            sb.Append("  Support: ").Append(Support).Append("\n");
            sb.Append("  Discontinued: ").Append(Discontinued).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ReleaseDate (DateOnly) maxLength
            if (this.ReleaseDate != null && this.ReleaseDate.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReleaseDate, length must be less than 10.", new [] { "ReleaseDate" });
            }

            // ReleaseDate (DateOnly) minLength
            if (this.ReleaseDate != null && this.ReleaseDate.Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReleaseDate, length must be greater than 10.", new [] { "ReleaseDate" });
            }

            // Latest (string) minLength
            if (this.Latest != null && this.Latest.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Latest, length must be greater than 1.", new [] { "Latest" });
            }

            // Link (string) minLength
            if (this.Link != null && this.Link.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Link, length must be greater than 1.", new [] { "Link" });
            }

            yield break;
        }
    }

}
