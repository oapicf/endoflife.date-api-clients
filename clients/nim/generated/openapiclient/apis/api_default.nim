#
# endoflife.date
#
# Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)
# The version of the OpenAPI document: 0.0.1
# Contact: blah+oapicf@cliffano.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_any_type
import ../models/model_cycle

const basepath = "https://endoflife.date"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc getApiAllJson*(httpClient: HttpClient): (Option[AnyType], Response) =
  ## All Products

  let response = httpClient.get(basepath & "/api/all.json")
  constructResult[AnyType](response)


proc getApiProductCycleJson*(httpClient: HttpClient, product: AnyType, cycle: AnyType): (Option[cycle], Response) =
  ## Single cycle details

  let response = httpClient.get(basepath & fmt"/api/{product}/{cycle}.json")
  constructResult[cycle](response)


proc getApiProductJson*(httpClient: HttpClient, product: AnyType): (Option[AnyType], Response) =
  ## Get All Details

  let response = httpClient.get(basepath & fmt"/api/{product}.json")
  constructResult[AnyType](response)

