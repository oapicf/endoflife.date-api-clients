/**
 * endoflife.date
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki).
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { Cycle } from '../model/cycle';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class DefaultService {

    protected basePath = 'https://endoflife.date';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * All Products
     * Return a list of all products. Each of these can be used for the other API endpoints.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getApiAllJsonOpts.config] Override http request option.
     */
    public getApiAllJson(getApiAllJsonOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<Array<string>>>;
    public getApiAllJson(getApiAllJsonOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<string>>(`${this.basePath}/api/all.json`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...getApiAllJsonOpts?.config,
                        headers: {...headers, ...getApiAllJsonOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Single cycle details
     * Gets details of a single cycle.
     * @param product Product URL as per the canonical URL on the endofife.date website.
     * @param cycle Release Cycle for which the details must be fetched. Any slash character in the cycle name will be replaced with dashes. For example FreeBSD\&#39;s releng/14.0 becomes releng-14.0.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getApiProductCycleJsonOpts.config] Override http request option.
     */
    public getApiProductCycleJson(product: string, cycle: string, getApiProductCycleJsonOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<Cycle>>;
    public getApiProductCycleJson(product: string, cycle: string, getApiProductCycleJsonOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (product === null || product === undefined) {
            throw new Error('Required parameter product was null or undefined when calling getApiProductCycleJson.');
        }

        if (cycle === null || cycle === undefined) {
            throw new Error('Required parameter cycle was null or undefined when calling getApiProductCycleJson.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Cycle>(`${this.basePath}/api/${encodeURIComponent(String(product))}/${encodeURIComponent(String(cycle))}.json`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...getApiProductCycleJsonOpts?.config,
                        headers: {...headers, ...getApiProductCycleJsonOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Get All Details
     * Get EoL dates of all cycles of a given product.
     * @param product Product URL as per the canonical URL on the endofife.date website.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getApiProductJsonOpts.config] Override http request option.
     */
    public getApiProductJson(product: string, getApiProductJsonOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<Array<Cycle>>>;
    public getApiProductJson(product: string, getApiProductJsonOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (product === null || product === undefined) {
            throw new Error('Required parameter product was null or undefined when calling getApiProductJson.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<Cycle>>(`${this.basePath}/api/${encodeURIComponent(String(product))}.json`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...getApiProductJsonOpts?.config,
                        headers: {...headers, ...getApiProductJsonOpts?.config?.headers},
                    }
                );
            })
        );
    }
}
