/*
 * endoflife.date
 *
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{
    /// <summary>
    /// Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
    /// </summary>
    [DataContract]
    public partial class Cycle : IEquatable<Cycle>
    {
        /// <summary>
        /// Release Cycle
        /// </summary>
        /// <value>Release Cycle</value>
        [DataMember(Name="cycle", EmitDefaultValue=true)]
        public Object VarCycle { get; set; }

        /// <summary>
        /// Release Date for the first release in this cycle
        /// </summary>
        /// <value>Release Date for the first release in this cycle</value>
        [StringLength(10, MinimumLength=10)]
        [DataMember(Name="releaseDate", EmitDefaultValue=true)]
        public Object ReleaseDate { get; set; }

        /// <summary>
        /// End of Life Date for this release cycle
        /// </summary>
        /// <value>End of Life Date for this release cycle</value>
        [MinLength(1)]
        [DataMember(Name="eol", EmitDefaultValue=true)]
        public Object Eol { get; set; }

        /// <summary>
        /// Latest release in this cycle
        /// </summary>
        /// <value>Latest release in this cycle</value>
        [MinLength(1)]
        [DataMember(Name="latest", EmitDefaultValue=true)]
        public Object Latest { get; set; }

        /// <summary>
        /// Link to changelog for the latest release, if available
        /// </summary>
        /// <value>Link to changelog for the latest release, if available</value>
        [MinLength(1)]
        [DataMember(Name="link", EmitDefaultValue=true)]
        public Object Link { get; set; }

        /// <summary>
        /// Whether this release cycle has long-term-support (LTS). Can be a date instead in YYYY-MM-DD format as well if the release enters LTS status on a given date.
        /// </summary>
        /// <value>Whether this release cycle has long-term-support (LTS). Can be a date instead in YYYY-MM-DD format as well if the release enters LTS status on a given date. </value>
        [DataMember(Name="lts", EmitDefaultValue=true)]
        public Object Lts { get; set; }

        /// <summary>
        /// Whether this release cycle has active support
        /// </summary>
        /// <value>Whether this release cycle has active support</value>
        [StringLength(10, MinimumLength=10)]
        [DataMember(Name="support", EmitDefaultValue=true)]
        public Object Support { get; set; }

        /// <summary>
        /// Whether this cycle is now discontinued.
        /// </summary>
        /// <value>Whether this cycle is now discontinued.</value>
        [StringLength(10, MinimumLength=10)]
        [DataMember(Name="discontinued", EmitDefaultValue=true)]
        public Object Discontinued { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cycle {\n");
            sb.Append("  VarCycle: ").Append(VarCycle).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  Eol: ").Append(Eol).Append("\n");
            sb.Append("  Latest: ").Append(Latest).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Lts: ").Append(Lts).Append("\n");
            sb.Append("  Support: ").Append(Support).Append("\n");
            sb.Append("  Discontinued: ").Append(Discontinued).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Cycle)obj);
        }

        /// <summary>
        /// Returns true if Cycle instances are equal
        /// </summary>
        /// <param name="other">Instance of Cycle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cycle other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    VarCycle == other.VarCycle ||
                    VarCycle != null &&
                    VarCycle.Equals(other.VarCycle)
                ) &&
                (
                    ReleaseDate == other.ReleaseDate ||
                    ReleaseDate != null &&
                    ReleaseDate.Equals(other.ReleaseDate)
                ) &&
                (
                    Eol == other.Eol ||
                    Eol != null &&
                    Eol.Equals(other.Eol)
                ) &&
                (
                    Latest == other.Latest ||
                    Latest != null &&
                    Latest.Equals(other.Latest)
                ) &&
                (
                    Link == other.Link ||
                    Link != null &&
                    Link.Equals(other.Link)
                ) &&
                (
                    Lts == other.Lts ||
                    Lts != null &&
                    Lts.Equals(other.Lts)
                ) &&
                (
                    Support == other.Support ||
                    Support != null &&
                    Support.Equals(other.Support)
                ) &&
                (
                    Discontinued == other.Discontinued ||
                    Discontinued != null &&
                    Discontinued.Equals(other.Discontinued)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VarCycle != null)
                    hashCode = hashCode * 59 + VarCycle.GetHashCode();
                    if (ReleaseDate != null)
                    hashCode = hashCode * 59 + ReleaseDate.GetHashCode();
                    if (Eol != null)
                    hashCode = hashCode * 59 + Eol.GetHashCode();
                    if (Latest != null)
                    hashCode = hashCode * 59 + Latest.GetHashCode();
                    if (Link != null)
                    hashCode = hashCode * 59 + Link.GetHashCode();
                    if (Lts != null)
                    hashCode = hashCode * 59 + Lts.GetHashCode();
                    if (Support != null)
                    hashCode = hashCode * 59 + Support.GetHashCode();
                    if (Discontinued != null)
                    hashCode = hashCode * 59 + Discontinued.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Cycle left, Cycle right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Cycle left, Cycle right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
