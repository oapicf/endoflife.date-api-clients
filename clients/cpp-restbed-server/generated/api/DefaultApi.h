/**
 * endoflife.date
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DefaultApi.h
 *
 * 
 */

#ifndef DefaultApi_H_
#define DefaultApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Cycle.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  DefaultApiException: public std::exception
{
public:
    DefaultApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace DefaultApiResources {
/// <summary>
/// All Products
/// </summary>
/// <remarks>
/// Return a list of all products. Each of these can be used for the other API endpoints.
/// </remarks>
class  ApiAll_jsonResource: public restbed::Resource
{
public:
    ApiAll_jsonResource(const std::string& context = "");
    virtual ~ApiAll_jsonResource() = default;

    ApiAll_jsonResource(
        const ApiAll_jsonResource& other) = default; // copy constructor
    ApiAll_jsonResource(ApiAll_jsonResource&& other) noexcept = default; // move constructor

    ApiAll_jsonResource& operator=(const ApiAll_jsonResource& other) = default; // copy assignment
    ApiAll_jsonResource& operator=(ApiAll_jsonResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<std::string>>(
        )> handler_GET_func =
            []() -> std::pair<int, std::vector<std::string>>
                { throw DefaultApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::string>> handler_GET(
        );


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDefaultApiException(const DefaultApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Single cycle details
/// </summary>
/// <remarks>
/// Gets details of a single cycle
/// </remarks>
class  ApiProductCycle_jsonResource: public restbed::Resource
{
public:
    ApiProductCycle_jsonResource(const std::string& context = "");
    virtual ~ApiProductCycle_jsonResource() = default;

    ApiProductCycle_jsonResource(
        const ApiProductCycle_jsonResource& other) = default; // copy constructor
    ApiProductCycle_jsonResource(ApiProductCycle_jsonResource&& other) noexcept = default; // move constructor

    ApiProductCycle_jsonResource& operator=(const ApiProductCycle_jsonResource& other) = default; // copy assignment
    ApiProductCycle_jsonResource& operator=(ApiProductCycle_jsonResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Cycle>(
        std::string & product, std::string & cycle)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, Cycle>
                { throw DefaultApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Cycle> handler_GET(
        std::string & product, std::string & cycle);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDefaultApiException(const DefaultApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get All Details
/// </summary>
/// <remarks>
/// Get EoL dates of all cycles of a given product.
/// </remarks>
class  ApiProduct_jsonResource: public restbed::Resource
{
public:
    ApiProduct_jsonResource(const std::string& context = "");
    virtual ~ApiProduct_jsonResource() = default;

    ApiProduct_jsonResource(
        const ApiProduct_jsonResource& other) = default; // copy constructor
    ApiProduct_jsonResource(ApiProduct_jsonResource&& other) noexcept = default; // move constructor

    ApiProduct_jsonResource& operator=(const ApiProduct_jsonResource& other) = default; // copy assignment
    ApiProduct_jsonResource& operator=(ApiProduct_jsonResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<Cycle>>(
        std::string & product)> handler_GET_func =
            [](std::string &) -> std::pair<int, std::vector<Cycle>>
                { throw DefaultApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<Cycle>> handler_GET(
        std::string & product);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleDefaultApiException(const DefaultApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace DefaultApiResources */

using DefaultApiApiAll_jsonResource [[deprecated]] = DefaultApiResources::ApiAll_jsonResource;
using DefaultApiApiProductCycle_jsonResource [[deprecated]] = DefaultApiResources::ApiProductCycle_jsonResource;
using DefaultApiApiProduct_jsonResource [[deprecated]] = DefaultApiResources::ApiProduct_jsonResource;

//
// The restbed service to actually implement the REST server
//
class  DefaultApi
{
public:
    explicit DefaultApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~DefaultApi();

    std::shared_ptr<DefaultApiResources::ApiAll_jsonResource> getApiAll_jsonResource();
    std::shared_ptr<DefaultApiResources::ApiProductCycle_jsonResource> getApiProductCycle_jsonResource();
    std::shared_ptr<DefaultApiResources::ApiProduct_jsonResource> getApiProduct_jsonResource();

    void setResource(std::shared_ptr<DefaultApiResources::ApiAll_jsonResource> resource);
    void setResource(std::shared_ptr<DefaultApiResources::ApiProductCycle_jsonResource> resource);
    void setResource(std::shared_ptr<DefaultApiResources::ApiProduct_jsonResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setDefaultApiApiAll_jsonResource(std::shared_ptr<DefaultApiResources::ApiAll_jsonResource> spDefaultApiApiAll_jsonResource);
    [[deprecated("use setResource()")]]
    virtual void setDefaultApiApiProductCycle_jsonResource(std::shared_ptr<DefaultApiResources::ApiProductCycle_jsonResource> spDefaultApiApiProductCycle_jsonResource);
    [[deprecated("use setResource()")]]
    virtual void setDefaultApiApiProduct_jsonResource(std::shared_ptr<DefaultApiResources::ApiProduct_jsonResource> spDefaultApiApiProduct_jsonResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<DefaultApiResources::ApiAll_jsonResource> m_spApiAll_jsonResource;
    std::shared_ptr<DefaultApiResources::ApiProductCycle_jsonResource> m_spApiProductCycle_jsonResource;
    std::shared_ptr<DefaultApiResources::ApiProduct_jsonResource> m_spApiProduct_jsonResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* DefaultApi_H_ */

