// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * endoflife.date
 *
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki).
 *
 * API version: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 */

package openapi




// Cycle - Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
type Cycle struct {

	Cycle CycleCycle `json:"cycle,omitempty"`

	// Release date for the first release in this cycle.
	ReleaseDate string `json:"releaseDate,omitempty"`

	Eol CycleEol `json:"eol,omitempty"`

	// Latest release in this cycle.
	Latest string `json:"latest,omitempty"`

	// Link to changelog for the latest release in this cycle, or null if unavailable.
	Link *string `json:"link,omitempty"`

	Lts CycleLts `json:"lts,omitempty"`

	Support CycleSupport `json:"support,omitempty"`

	Discontinued CycleDiscontinued `json:"discontinued,omitempty"`
}

// AssertCycleRequired checks if the required fields are not zero-ed
func AssertCycleRequired(obj Cycle) error {
	if err := AssertCycleCycleRequired(obj.Cycle); err != nil {
		return err
	}
	if err := AssertCycleEolRequired(obj.Eol); err != nil {
		return err
	}
	if err := AssertCycleLtsRequired(obj.Lts); err != nil {
		return err
	}
	if err := AssertCycleSupportRequired(obj.Support); err != nil {
		return err
	}
	if err := AssertCycleDiscontinuedRequired(obj.Discontinued); err != nil {
		return err
	}
	return nil
}

// AssertCycleConstraints checks if the values respects the defined constraints
func AssertCycleConstraints(obj Cycle) error {
	if err := AssertCycleCycleConstraints(obj.Cycle); err != nil {
		return err
	}
	if err := AssertCycleEolConstraints(obj.Eol); err != nil {
		return err
	}
	if err := AssertCycleLtsConstraints(obj.Lts); err != nil {
		return err
	}
	if err := AssertCycleSupportConstraints(obj.Support); err != nil {
		return err
	}
	if err := AssertCycleDiscontinuedConstraints(obj.Discontinued); err != nil {
		return err
	}
	return nil
}
