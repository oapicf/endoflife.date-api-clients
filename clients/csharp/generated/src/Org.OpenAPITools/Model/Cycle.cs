/*
 * endoflife.date
 *
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
    /// </summary>
    [DataContract(Name = "cycle")]
    public partial class Cycle : IEquatable<Cycle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cycle" /> class.
        /// </summary>
        /// <param name="varCycle">Release Cycle.</param>
        /// <param name="releaseDate">Release Date for the first release in this cycle.</param>
        /// <param name="eol">End of Life Date for this release cycle.</param>
        /// <param name="latest">Latest release in this cycle.</param>
        /// <param name="link">Link to changelog for the latest release, if available.</param>
        /// <param name="lts">Whether this release cycle has long-term-support (LTS). Can be a date instead in YYYY-MM-DD format as well if the release enters LTS status on a given date. .</param>
        /// <param name="support">Whether this release cycle has active support.</param>
        /// <param name="discontinued">Whether this cycle is now discontinued..</param>
        public Cycle(Object varCycle = default(Object), Object releaseDate = default(Object), Object eol = default(Object), Object latest = default(Object), Object link = default(Object), Object lts = default(Object), Object support = default(Object), Object discontinued = default(Object))
        {
            this.VarCycle = varCycle;
            this.ReleaseDate = releaseDate;
            this.Eol = eol;
            this.Latest = latest;
            this.Link = link;
            this.Lts = lts;
            this.Support = support;
            this.Discontinued = discontinued;
        }

        /// <summary>
        /// Release Cycle
        /// </summary>
        /// <value>Release Cycle</value>
        [DataMember(Name = "cycle", EmitDefaultValue = true)]
        public Object VarCycle { get; set; }

        /// <summary>
        /// Release Date for the first release in this cycle
        /// </summary>
        /// <value>Release Date for the first release in this cycle</value>
        [DataMember(Name = "releaseDate", EmitDefaultValue = true)]
        public Object ReleaseDate { get; set; }

        /// <summary>
        /// End of Life Date for this release cycle
        /// </summary>
        /// <value>End of Life Date for this release cycle</value>
        [DataMember(Name = "eol", EmitDefaultValue = true)]
        public Object Eol { get; set; }

        /// <summary>
        /// Latest release in this cycle
        /// </summary>
        /// <value>Latest release in this cycle</value>
        [DataMember(Name = "latest", EmitDefaultValue = true)]
        public Object Latest { get; set; }

        /// <summary>
        /// Link to changelog for the latest release, if available
        /// </summary>
        /// <value>Link to changelog for the latest release, if available</value>
        [DataMember(Name = "link", EmitDefaultValue = true)]
        public Object Link { get; set; }

        /// <summary>
        /// Whether this release cycle has long-term-support (LTS). Can be a date instead in YYYY-MM-DD format as well if the release enters LTS status on a given date.
        /// </summary>
        /// <value>Whether this release cycle has long-term-support (LTS). Can be a date instead in YYYY-MM-DD format as well if the release enters LTS status on a given date. </value>
        [DataMember(Name = "lts", EmitDefaultValue = true)]
        public Object Lts { get; set; }

        /// <summary>
        /// Whether this release cycle has active support
        /// </summary>
        /// <value>Whether this release cycle has active support</value>
        [DataMember(Name = "support", EmitDefaultValue = true)]
        public Object Support { get; set; }

        /// <summary>
        /// Whether this cycle is now discontinued.
        /// </summary>
        /// <value>Whether this cycle is now discontinued.</value>
        [DataMember(Name = "discontinued", EmitDefaultValue = true)]
        public Object Discontinued { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Cycle {\n");
            sb.Append("  VarCycle: ").Append(VarCycle).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  Eol: ").Append(Eol).Append("\n");
            sb.Append("  Latest: ").Append(Latest).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Lts: ").Append(Lts).Append("\n");
            sb.Append("  Support: ").Append(Support).Append("\n");
            sb.Append("  Discontinued: ").Append(Discontinued).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cycle);
        }

        /// <summary>
        /// Returns true if Cycle instances are equal
        /// </summary>
        /// <param name="input">Instance of Cycle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cycle input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.VarCycle == input.VarCycle ||
                    (this.VarCycle != null &&
                    this.VarCycle.Equals(input.VarCycle))
                ) &&
                (
                    this.ReleaseDate == input.ReleaseDate ||
                    (this.ReleaseDate != null &&
                    this.ReleaseDate.Equals(input.ReleaseDate))
                ) &&
                (
                    this.Eol == input.Eol ||
                    (this.Eol != null &&
                    this.Eol.Equals(input.Eol))
                ) &&
                (
                    this.Latest == input.Latest ||
                    (this.Latest != null &&
                    this.Latest.Equals(input.Latest))
                ) &&
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) &&
                (
                    this.Lts == input.Lts ||
                    (this.Lts != null &&
                    this.Lts.Equals(input.Lts))
                ) &&
                (
                    this.Support == input.Support ||
                    (this.Support != null &&
                    this.Support.Equals(input.Support))
                ) &&
                (
                    this.Discontinued == input.Discontinued ||
                    (this.Discontinued != null &&
                    this.Discontinued.Equals(input.Discontinued))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VarCycle != null)
                {
                    hashCode = (hashCode * 59) + this.VarCycle.GetHashCode();
                }
                if (this.ReleaseDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReleaseDate.GetHashCode();
                }
                if (this.Eol != null)
                {
                    hashCode = (hashCode * 59) + this.Eol.GetHashCode();
                }
                if (this.Latest != null)
                {
                    hashCode = (hashCode * 59) + this.Latest.GetHashCode();
                }
                if (this.Link != null)
                {
                    hashCode = (hashCode * 59) + this.Link.GetHashCode();
                }
                if (this.Lts != null)
                {
                    hashCode = (hashCode * 59) + this.Lts.GetHashCode();
                }
                if (this.Support != null)
                {
                    hashCode = (hashCode * 59) + this.Support.GetHashCode();
                }
                if (this.Discontinued != null)
                {
                    hashCode = (hashCode * 59) + this.Discontinued.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ReleaseDate (Object) maxLength
            if (this.ReleaseDate != null && this.ReleaseDate.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReleaseDate, length must be less than 10.", new [] { "ReleaseDate" });
            }

            // ReleaseDate (Object) minLength
            if (this.ReleaseDate != null && this.ReleaseDate.Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReleaseDate, length must be greater than 10.", new [] { "ReleaseDate" });
            }

            // Eol (Object) minLength
            if (this.Eol != null && this.Eol.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Eol, length must be greater than 1.", new [] { "Eol" });
            }

            // Latest (Object) minLength
            if (this.Latest != null && this.Latest.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Latest, length must be greater than 1.", new [] { "Latest" });
            }

            // Link (Object) minLength
            if (this.Link != null && this.Link.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Link, length must be greater than 1.", new [] { "Link" });
            }

            // Support (Object) maxLength
            if (this.Support != null && this.Support.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Support, length must be less than 10.", new [] { "Support" });
            }

            // Support (Object) minLength
            if (this.Support != null && this.Support.Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Support, length must be greater than 10.", new [] { "Support" });
            }

            // Discontinued (Object) maxLength
            if (this.Discontinued != null && this.Discontinued.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Discontinued, length must be less than 10.", new [] { "Discontinued" });
            }

            // Discontinued (Object) minLength
            if (this.Discontinued != null && this.Discontinued.Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Discontinued, length must be greater than 10.", new [] { "Discontinued" });
            }

            yield break;
        }
    }

}
