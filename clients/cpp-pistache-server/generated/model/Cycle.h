/**
* endoflife.date
* Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)
*
* The version of the OpenAPI document: 0.0.1
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Cycle.h
 *
 * Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
 */

#ifndef Cycle_H_
#define Cycle_H_


#include "Cycle_support.h"
#include "Cycle_eol.h"
#include <string>
#include "Cycle_cycle.h"
#include "Cycle_discontinued.h"
#include "Cycle_lts.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
/// </summary>
class  Cycle
{
public:
    Cycle();
    virtual ~Cycle() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Cycle& rhs) const;
    bool operator!=(const Cycle& rhs) const;

    /////////////////////////////////////////////
    /// Cycle members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Cycle_cycle getCycle() const;
    void setCycle(org::openapitools::server::model::Cycle_cycle const& value);
    bool cycleIsSet() const;
    void unsetCycle();
    /// <summary>
    /// Release Date for the first release in this cycle
    /// </summary>
    std::string getReleaseDate() const;
    void setReleaseDate(std::string const& value);
    bool releaseDateIsSet() const;
    void unsetReleaseDate();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Cycle_eol getEol() const;
    void setEol(org::openapitools::server::model::Cycle_eol const& value);
    bool eolIsSet() const;
    void unsetEol();
    /// <summary>
    /// Latest release in this cycle
    /// </summary>
    std::string getLatest() const;
    void setLatest(std::string const& value);
    bool latestIsSet() const;
    void unsetLatest();
    /// <summary>
    /// Link to changelog for the latest release, if available
    /// </summary>
    std::string getLink() const;
    void setLink(std::string const& value);
    bool linkIsSet() const;
    void unsetLink();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Cycle_lts getLts() const;
    void setLts(org::openapitools::server::model::Cycle_lts const& value);
    bool ltsIsSet() const;
    void unsetLts();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Cycle_support getSupport() const;
    void setSupport(org::openapitools::server::model::Cycle_support const& value);
    bool supportIsSet() const;
    void unsetSupport();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Cycle_discontinued getDiscontinued() const;
    void setDiscontinued(org::openapitools::server::model::Cycle_discontinued const& value);
    bool discontinuedIsSet() const;
    void unsetDiscontinued();

    friend  void to_json(nlohmann::json& j, const Cycle& o);
    friend  void from_json(const nlohmann::json& j, Cycle& o);
protected:
    org::openapitools::server::model::Cycle_cycle m_Cycle;
    bool m_CycleIsSet;
    std::string m_ReleaseDate;
    bool m_ReleaseDateIsSet;
    org::openapitools::server::model::Cycle_eol m_Eol;
    bool m_EolIsSet;
    std::string m_Latest;
    bool m_LatestIsSet;
    std::string m_Link;
    bool m_LinkIsSet;
    org::openapitools::server::model::Cycle_lts m_Lts;
    bool m_LtsIsSet;
    org::openapitools::server::model::Cycle_support m_Support;
    bool m_SupportIsSet;
    org::openapitools::server::model::Cycle_discontinued m_Discontinued;
    bool m_DiscontinuedIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* Cycle_H_ */
