/*
endoflife.date

Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)

API version: 0.0.1
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Cycle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cycle{}

// Cycle Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
type Cycle struct {
	// Release Cycle
	Cycle interface{} `json:"cycle,omitempty"`
	// Release Date for the first release in this cycle
	ReleaseDate interface{} `json:"releaseDate,omitempty"`
	// End of Life Date for this release cycle
	Eol interface{} `json:"eol,omitempty"`
	// Latest release in this cycle
	Latest interface{} `json:"latest,omitempty"`
	// Link to changelog for the latest release, if available
	Link interface{} `json:"link,omitempty"`
	// Whether this release cycle has long-term-support (LTS). Can be a date instead in YYYY-MM-DD format as well if the release enters LTS status on a given date.
	Lts interface{} `json:"lts,omitempty"`
	// Whether this release cycle has active support
	Support interface{} `json:"support,omitempty"`
	// Whether this cycle is now discontinued.
	Discontinued interface{} `json:"discontinued,omitempty"`
}

// NewCycle instantiates a new Cycle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCycle() *Cycle {
	this := Cycle{}
	return &this
}

// NewCycleWithDefaults instantiates a new Cycle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCycleWithDefaults() *Cycle {
	this := Cycle{}
	return &this
}

// GetCycle returns the Cycle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cycle) GetCycle() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Cycle
}

// GetCycleOk returns a tuple with the Cycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cycle) GetCycleOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Cycle) {
		return nil, false
	}
	return &o.Cycle, true
}

// HasCycle returns a boolean if a field has been set.
func (o *Cycle) HasCycle() bool {
	if o != nil && IsNil(o.Cycle) {
		return true
	}

	return false
}

// SetCycle gets a reference to the given interface{} and assigns it to the Cycle field.
func (o *Cycle) SetCycle(v interface{}) {
	o.Cycle = v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cycle) GetReleaseDate() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cycle) GetReleaseDateOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ReleaseDate) {
		return nil, false
	}
	return &o.ReleaseDate, true
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *Cycle) HasReleaseDate() bool {
	if o != nil && IsNil(o.ReleaseDate) {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given interface{} and assigns it to the ReleaseDate field.
func (o *Cycle) SetReleaseDate(v interface{}) {
	o.ReleaseDate = v
}

// GetEol returns the Eol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cycle) GetEol() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Eol
}

// GetEolOk returns a tuple with the Eol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cycle) GetEolOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Eol) {
		return nil, false
	}
	return &o.Eol, true
}

// HasEol returns a boolean if a field has been set.
func (o *Cycle) HasEol() bool {
	if o != nil && IsNil(o.Eol) {
		return true
	}

	return false
}

// SetEol gets a reference to the given interface{} and assigns it to the Eol field.
func (o *Cycle) SetEol(v interface{}) {
	o.Eol = v
}

// GetLatest returns the Latest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cycle) GetLatest() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Latest
}

// GetLatestOk returns a tuple with the Latest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cycle) GetLatestOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Latest) {
		return nil, false
	}
	return &o.Latest, true
}

// HasLatest returns a boolean if a field has been set.
func (o *Cycle) HasLatest() bool {
	if o != nil && IsNil(o.Latest) {
		return true
	}

	return false
}

// SetLatest gets a reference to the given interface{} and assigns it to the Latest field.
func (o *Cycle) SetLatest(v interface{}) {
	o.Latest = v
}

// GetLink returns the Link field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cycle) GetLink() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cycle) GetLinkOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return &o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *Cycle) HasLink() bool {
	if o != nil && IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given interface{} and assigns it to the Link field.
func (o *Cycle) SetLink(v interface{}) {
	o.Link = v
}

// GetLts returns the Lts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cycle) GetLts() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Lts
}

// GetLtsOk returns a tuple with the Lts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cycle) GetLtsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Lts) {
		return nil, false
	}
	return &o.Lts, true
}

// HasLts returns a boolean if a field has been set.
func (o *Cycle) HasLts() bool {
	if o != nil && IsNil(o.Lts) {
		return true
	}

	return false
}

// SetLts gets a reference to the given interface{} and assigns it to the Lts field.
func (o *Cycle) SetLts(v interface{}) {
	o.Lts = v
}

// GetSupport returns the Support field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cycle) GetSupport() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Support
}

// GetSupportOk returns a tuple with the Support field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cycle) GetSupportOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Support) {
		return nil, false
	}
	return &o.Support, true
}

// HasSupport returns a boolean if a field has been set.
func (o *Cycle) HasSupport() bool {
	if o != nil && IsNil(o.Support) {
		return true
	}

	return false
}

// SetSupport gets a reference to the given interface{} and assigns it to the Support field.
func (o *Cycle) SetSupport(v interface{}) {
	o.Support = v
}

// GetDiscontinued returns the Discontinued field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cycle) GetDiscontinued() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Discontinued
}

// GetDiscontinuedOk returns a tuple with the Discontinued field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cycle) GetDiscontinuedOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Discontinued) {
		return nil, false
	}
	return &o.Discontinued, true
}

// HasDiscontinued returns a boolean if a field has been set.
func (o *Cycle) HasDiscontinued() bool {
	if o != nil && IsNil(o.Discontinued) {
		return true
	}

	return false
}

// SetDiscontinued gets a reference to the given interface{} and assigns it to the Discontinued field.
func (o *Cycle) SetDiscontinued(v interface{}) {
	o.Discontinued = v
}

func (o Cycle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cycle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Cycle != nil {
		toSerialize["cycle"] = o.Cycle
	}
	if o.ReleaseDate != nil {
		toSerialize["releaseDate"] = o.ReleaseDate
	}
	if o.Eol != nil {
		toSerialize["eol"] = o.Eol
	}
	if o.Latest != nil {
		toSerialize["latest"] = o.Latest
	}
	if o.Link != nil {
		toSerialize["link"] = o.Link
	}
	if o.Lts != nil {
		toSerialize["lts"] = o.Lts
	}
	if o.Support != nil {
		toSerialize["support"] = o.Support
	}
	if o.Discontinued != nil {
		toSerialize["discontinued"] = o.Discontinued
	}
	return toSerialize, nil
}

type NullableCycle struct {
	value *Cycle
	isSet bool
}

func (v NullableCycle) Get() *Cycle {
	return v.value
}

func (v *NullableCycle) Set(val *Cycle) {
	v.value = val
	v.isSet = true
}

func (v NullableCycle) IsSet() bool {
	return v.isSet
}

func (v *NullableCycle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCycle(val *Cycle) *NullableCycle {
	return &NullableCycle{value: val, isSet: true}
}

func (v NullableCycle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCycle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


