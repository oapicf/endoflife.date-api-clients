/*
endoflife.date

Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)

API version: 0.0.1
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Cycle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cycle{}

// Cycle Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
type Cycle struct {
	Cycle *CycleCycle `json:"cycle,omitempty"`
	// Release Date for the first release in this cycle
	ReleaseDate *string `json:"releaseDate,omitempty"`
	Eol *CycleEol `json:"eol,omitempty"`
	// Latest release in this cycle
	Latest *string `json:"latest,omitempty"`
	// Link to changelog for the latest release, if available
	Link NullableString `json:"link,omitempty"`
	Lts *CycleLts `json:"lts,omitempty"`
	Support *CycleSupport `json:"support,omitempty"`
	Discontinued *CycleDiscontinued `json:"discontinued,omitempty"`
}

// NewCycle instantiates a new Cycle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCycle() *Cycle {
	this := Cycle{}
	return &this
}

// NewCycleWithDefaults instantiates a new Cycle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCycleWithDefaults() *Cycle {
	this := Cycle{}
	return &this
}

// GetCycle returns the Cycle field value if set, zero value otherwise.
func (o *Cycle) GetCycle() CycleCycle {
	if o == nil || IsNil(o.Cycle) {
		var ret CycleCycle
		return ret
	}
	return *o.Cycle
}

// GetCycleOk returns a tuple with the Cycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cycle) GetCycleOk() (*CycleCycle, bool) {
	if o == nil || IsNil(o.Cycle) {
		return nil, false
	}
	return o.Cycle, true
}

// HasCycle returns a boolean if a field has been set.
func (o *Cycle) HasCycle() bool {
	if o != nil && !IsNil(o.Cycle) {
		return true
	}

	return false
}

// SetCycle gets a reference to the given CycleCycle and assigns it to the Cycle field.
func (o *Cycle) SetCycle(v CycleCycle) {
	o.Cycle = &v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise.
func (o *Cycle) GetReleaseDate() string {
	if o == nil || IsNil(o.ReleaseDate) {
		var ret string
		return ret
	}
	return *o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cycle) GetReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseDate) {
		return nil, false
	}
	return o.ReleaseDate, true
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *Cycle) HasReleaseDate() bool {
	if o != nil && !IsNil(o.ReleaseDate) {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given string and assigns it to the ReleaseDate field.
func (o *Cycle) SetReleaseDate(v string) {
	o.ReleaseDate = &v
}

// GetEol returns the Eol field value if set, zero value otherwise.
func (o *Cycle) GetEol() CycleEol {
	if o == nil || IsNil(o.Eol) {
		var ret CycleEol
		return ret
	}
	return *o.Eol
}

// GetEolOk returns a tuple with the Eol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cycle) GetEolOk() (*CycleEol, bool) {
	if o == nil || IsNil(o.Eol) {
		return nil, false
	}
	return o.Eol, true
}

// HasEol returns a boolean if a field has been set.
func (o *Cycle) HasEol() bool {
	if o != nil && !IsNil(o.Eol) {
		return true
	}

	return false
}

// SetEol gets a reference to the given CycleEol and assigns it to the Eol field.
func (o *Cycle) SetEol(v CycleEol) {
	o.Eol = &v
}

// GetLatest returns the Latest field value if set, zero value otherwise.
func (o *Cycle) GetLatest() string {
	if o == nil || IsNil(o.Latest) {
		var ret string
		return ret
	}
	return *o.Latest
}

// GetLatestOk returns a tuple with the Latest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cycle) GetLatestOk() (*string, bool) {
	if o == nil || IsNil(o.Latest) {
		return nil, false
	}
	return o.Latest, true
}

// HasLatest returns a boolean if a field has been set.
func (o *Cycle) HasLatest() bool {
	if o != nil && !IsNil(o.Latest) {
		return true
	}

	return false
}

// SetLatest gets a reference to the given string and assigns it to the Latest field.
func (o *Cycle) SetLatest(v string) {
	o.Latest = &v
}

// GetLink returns the Link field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cycle) GetLink() string {
	if o == nil || IsNil(o.Link.Get()) {
		var ret string
		return ret
	}
	return *o.Link.Get()
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cycle) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Link.Get(), o.Link.IsSet()
}

// HasLink returns a boolean if a field has been set.
func (o *Cycle) HasLink() bool {
	if o != nil && o.Link.IsSet() {
		return true
	}

	return false
}

// SetLink gets a reference to the given NullableString and assigns it to the Link field.
func (o *Cycle) SetLink(v string) {
	o.Link.Set(&v)
}
// SetLinkNil sets the value for Link to be an explicit nil
func (o *Cycle) SetLinkNil() {
	o.Link.Set(nil)
}

// UnsetLink ensures that no value is present for Link, not even an explicit nil
func (o *Cycle) UnsetLink() {
	o.Link.Unset()
}

// GetLts returns the Lts field value if set, zero value otherwise.
func (o *Cycle) GetLts() CycleLts {
	if o == nil || IsNil(o.Lts) {
		var ret CycleLts
		return ret
	}
	return *o.Lts
}

// GetLtsOk returns a tuple with the Lts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cycle) GetLtsOk() (*CycleLts, bool) {
	if o == nil || IsNil(o.Lts) {
		return nil, false
	}
	return o.Lts, true
}

// HasLts returns a boolean if a field has been set.
func (o *Cycle) HasLts() bool {
	if o != nil && !IsNil(o.Lts) {
		return true
	}

	return false
}

// SetLts gets a reference to the given CycleLts and assigns it to the Lts field.
func (o *Cycle) SetLts(v CycleLts) {
	o.Lts = &v
}

// GetSupport returns the Support field value if set, zero value otherwise.
func (o *Cycle) GetSupport() CycleSupport {
	if o == nil || IsNil(o.Support) {
		var ret CycleSupport
		return ret
	}
	return *o.Support
}

// GetSupportOk returns a tuple with the Support field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cycle) GetSupportOk() (*CycleSupport, bool) {
	if o == nil || IsNil(o.Support) {
		return nil, false
	}
	return o.Support, true
}

// HasSupport returns a boolean if a field has been set.
func (o *Cycle) HasSupport() bool {
	if o != nil && !IsNil(o.Support) {
		return true
	}

	return false
}

// SetSupport gets a reference to the given CycleSupport and assigns it to the Support field.
func (o *Cycle) SetSupport(v CycleSupport) {
	o.Support = &v
}

// GetDiscontinued returns the Discontinued field value if set, zero value otherwise.
func (o *Cycle) GetDiscontinued() CycleDiscontinued {
	if o == nil || IsNil(o.Discontinued) {
		var ret CycleDiscontinued
		return ret
	}
	return *o.Discontinued
}

// GetDiscontinuedOk returns a tuple with the Discontinued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cycle) GetDiscontinuedOk() (*CycleDiscontinued, bool) {
	if o == nil || IsNil(o.Discontinued) {
		return nil, false
	}
	return o.Discontinued, true
}

// HasDiscontinued returns a boolean if a field has been set.
func (o *Cycle) HasDiscontinued() bool {
	if o != nil && !IsNil(o.Discontinued) {
		return true
	}

	return false
}

// SetDiscontinued gets a reference to the given CycleDiscontinued and assigns it to the Discontinued field.
func (o *Cycle) SetDiscontinued(v CycleDiscontinued) {
	o.Discontinued = &v
}

func (o Cycle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cycle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cycle) {
		toSerialize["cycle"] = o.Cycle
	}
	if !IsNil(o.ReleaseDate) {
		toSerialize["releaseDate"] = o.ReleaseDate
	}
	if !IsNil(o.Eol) {
		toSerialize["eol"] = o.Eol
	}
	if !IsNil(o.Latest) {
		toSerialize["latest"] = o.Latest
	}
	if o.Link.IsSet() {
		toSerialize["link"] = o.Link.Get()
	}
	if !IsNil(o.Lts) {
		toSerialize["lts"] = o.Lts
	}
	if !IsNil(o.Support) {
		toSerialize["support"] = o.Support
	}
	if !IsNil(o.Discontinued) {
		toSerialize["discontinued"] = o.Discontinued
	}
	return toSerialize, nil
}

type NullableCycle struct {
	value *Cycle
	isSet bool
}

func (v NullableCycle) Get() *Cycle {
	return v.value
}

func (v *NullableCycle) Set(val *Cycle) {
	v.value = val
	v.isSet = true
}

func (v NullableCycle) IsSet() bool {
	return v.isSet
}

func (v *NullableCycle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCycle(val *Cycle) *NullableCycle {
	return &NullableCycle{value: val, isSet: true}
}

func (v NullableCycle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCycle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


