/**
 * endoflife.date
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki).
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CycleCycle from './CycleCycle';
import CycleDiscontinued from './CycleDiscontinued';
import CycleEol from './CycleEol';
import CycleLts from './CycleLts';
import CycleSupport from './CycleSupport';

/**
 * The Cycle model module.
 * @module model/Cycle
 * @version 0.0.1
 */
class Cycle {
    /**
     * @member {module:model/CycleCycle} cycle
     * @type {module:model/CycleCycle}
     */
    cycle;
    /**
     * @member {Date} releaseDate
     * @type {Date}
     */
    releaseDate;
    /**
     * @member {module:model/CycleEol} eol
     * @type {module:model/CycleEol}
     */
    eol;
    /**
     * @member {String} latest
     * @type {String}
     */
    latest;
    /**
     * @member {String} link
     * @type {String}
     */
    link;
    /**
     * @member {module:model/CycleLts} lts
     * @type {module:model/CycleLts}
     */
    lts;
    /**
     * @member {module:model/CycleSupport} support
     * @type {module:model/CycleSupport}
     */
    support;
    /**
     * @member {module:model/CycleDiscontinued} discontinued
     * @type {module:model/CycleDiscontinued}
     */
    discontinued;

    

    /**
     * Constructs a new <code>Cycle</code>.
     * Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
     * @alias module:model/Cycle
     */
    constructor() { 
        
        Cycle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Cycle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cycle} obj Optional instance to populate.
     * @return {module:model/Cycle} The populated <code>Cycle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cycle();

            if (data.hasOwnProperty('cycle')) {
                obj['cycle'] = CycleCycle.constructFromObject(data['cycle']);
            }
            if (data.hasOwnProperty('releaseDate')) {
                obj['releaseDate'] = ApiClient.convertToType(data['releaseDate'], 'Date');
            }
            if (data.hasOwnProperty('eol')) {
                obj['eol'] = CycleEol.constructFromObject(data['eol']);
            }
            if (data.hasOwnProperty('latest')) {
                obj['latest'] = ApiClient.convertToType(data['latest'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('lts')) {
                obj['lts'] = CycleLts.constructFromObject(data['lts']);
            }
            if (data.hasOwnProperty('support')) {
                obj['support'] = CycleSupport.constructFromObject(data['support']);
            }
            if (data.hasOwnProperty('discontinued')) {
                obj['discontinued'] = CycleDiscontinued.constructFromObject(data['discontinued']);
            }
        }
        return obj;
    }
}



export default Cycle;

