// <auto-generated>
/*
 * endoflife.date
 *
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki).
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Details of a single release cycle of a given product. There might be some slight variations to this depending on the product.
    /// </summary>
    public partial class Cycle : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cycle" /> class.
        /// </summary>
        /// <param name="varCycle">varCycle</param>
        /// <param name="releaseDate">Release date for the first release in this cycle.</param>
        /// <param name="eol">eol</param>
        /// <param name="latest">Latest release in this cycle.</param>
        /// <param name="link">Link to changelog for the latest release in this cycle, or null if unavailable.</param>
        /// <param name="lts">lts</param>
        /// <param name="support">support</param>
        /// <param name="discontinued">discontinued</param>
        [JsonConstructor]
        public Cycle(Option<CycleCycle?> varCycle = default, Option<DateOnly?> releaseDate = default, Option<CycleEol?> eol = default, Option<string?> latest = default, Option<string?> link = default, Option<CycleLts?> lts = default, Option<CycleSupport?> support = default, Option<CycleDiscontinued?> discontinued = default)
        {
            VarCycleOption = varCycle;
            ReleaseDateOption = releaseDate;
            EolOption = eol;
            LatestOption = latest;
            LinkOption = link;
            LtsOption = lts;
            SupportOption = support;
            DiscontinuedOption = discontinued;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of VarCycle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CycleCycle?> VarCycleOption { get; private set; }

        /// <summary>
        /// Gets or Sets VarCycle
        /// </summary>
        [JsonPropertyName("cycle")]
        public CycleCycle? VarCycle { get { return this.VarCycleOption; } set { this.VarCycleOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReleaseDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> ReleaseDateOption { get; private set; }

        /// <summary>
        /// Release date for the first release in this cycle.
        /// </summary>
        /// <value>Release date for the first release in this cycle.</value>
        [JsonPropertyName("releaseDate")]
        public DateOnly? ReleaseDate { get { return this.ReleaseDateOption; } set { this.ReleaseDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Eol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CycleEol?> EolOption { get; private set; }

        /// <summary>
        /// Gets or Sets Eol
        /// </summary>
        [JsonPropertyName("eol")]
        public CycleEol? Eol { get { return this.EolOption; } set { this.EolOption = new(value); } }

        /// <summary>
        /// Used to track the state of Latest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LatestOption { get; private set; }

        /// <summary>
        /// Latest release in this cycle.
        /// </summary>
        /// <value>Latest release in this cycle.</value>
        [JsonPropertyName("latest")]
        public string? Latest { get { return this.LatestOption; } set { this.LatestOption = new(value); } }

        /// <summary>
        /// Used to track the state of Link
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LinkOption { get; private set; }

        /// <summary>
        /// Link to changelog for the latest release in this cycle, or null if unavailable.
        /// </summary>
        /// <value>Link to changelog for the latest release in this cycle, or null if unavailable.</value>
        [JsonPropertyName("link")]
        public string? Link { get { return this.LinkOption; } set { this.LinkOption = new(value); } }

        /// <summary>
        /// Used to track the state of Lts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CycleLts?> LtsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Lts
        /// </summary>
        [JsonPropertyName("lts")]
        public CycleLts? Lts { get { return this.LtsOption; } set { this.LtsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Support
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CycleSupport?> SupportOption { get; private set; }

        /// <summary>
        /// Gets or Sets Support
        /// </summary>
        [JsonPropertyName("support")]
        public CycleSupport? Support { get { return this.SupportOption; } set { this.SupportOption = new(value); } }

        /// <summary>
        /// Used to track the state of Discontinued
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CycleDiscontinued?> DiscontinuedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Discontinued
        /// </summary>
        [JsonPropertyName("discontinued")]
        public CycleDiscontinued? Discontinued { get { return this.DiscontinuedOption; } set { this.DiscontinuedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Cycle {\n");
            sb.Append("  VarCycle: ").Append(VarCycle).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  Eol: ").Append(Eol).Append("\n");
            sb.Append("  Latest: ").Append(Latest).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Lts: ").Append(Lts).Append("\n");
            sb.Append("  Support: ").Append(Support).Append("\n");
            sb.Append("  Discontinued: ").Append(Discontinued).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ReleaseDate (DateOnly) maxLength
            if (this.ReleaseDate != null && this.ReleaseDate.Length > 10)
            {
                yield return new ValidationResult("Invalid value for ReleaseDate, length must be less than 10.", new [] { "ReleaseDate" });
            }

            // ReleaseDate (DateOnly) minLength
            if (this.ReleaseDate != null && this.ReleaseDate.Length < 10)
            {
                yield return new ValidationResult("Invalid value for ReleaseDate, length must be greater than 10.", new [] { "ReleaseDate" });
            }

            // Latest (string) minLength
            if (this.Latest != null && this.Latest.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Latest, length must be greater than 1.", new [] { "Latest" });
            }

            // Link (string) minLength
            if (this.Link != null && this.Link.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Link, length must be greater than 1.", new [] { "Link" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Cycle" />
    /// </summary>
    public class CycleJsonConverter : JsonConverter<Cycle>
    {
        /// <summary>
        /// The format to use to serialize ReleaseDate
        /// </summary>
        public static string ReleaseDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="Cycle" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Cycle Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CycleCycle?> varCycle = default;
            Option<DateOnly?> releaseDate = default;
            Option<CycleEol?> eol = default;
            Option<string?> latest = default;
            Option<string?> link = default;
            Option<CycleLts?> lts = default;
            Option<CycleSupport?> support = default;
            Option<CycleDiscontinued?> discontinued = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "cycle":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                varCycle = new Option<CycleCycle?>(JsonSerializer.Deserialize<CycleCycle>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "releaseDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                releaseDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "eol":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eol = new Option<CycleEol?>(JsonSerializer.Deserialize<CycleEol>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "latest":
                            latest = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "link":
                            link = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "lts":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lts = new Option<CycleLts?>(JsonSerializer.Deserialize<CycleLts>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "support":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                support = new Option<CycleSupport?>(JsonSerializer.Deserialize<CycleSupport>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "discontinued":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                discontinued = new Option<CycleDiscontinued?>(JsonSerializer.Deserialize<CycleDiscontinued>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varCycle.IsSet && varCycle.Value == null)
                throw new ArgumentNullException(nameof(varCycle), "Property is not nullable for class Cycle.");

            if (releaseDate.IsSet && releaseDate.Value == null)
                throw new ArgumentNullException(nameof(releaseDate), "Property is not nullable for class Cycle.");

            if (eol.IsSet && eol.Value == null)
                throw new ArgumentNullException(nameof(eol), "Property is not nullable for class Cycle.");

            if (latest.IsSet && latest.Value == null)
                throw new ArgumentNullException(nameof(latest), "Property is not nullable for class Cycle.");

            if (lts.IsSet && lts.Value == null)
                throw new ArgumentNullException(nameof(lts), "Property is not nullable for class Cycle.");

            if (support.IsSet && support.Value == null)
                throw new ArgumentNullException(nameof(support), "Property is not nullable for class Cycle.");

            if (discontinued.IsSet && discontinued.Value == null)
                throw new ArgumentNullException(nameof(discontinued), "Property is not nullable for class Cycle.");

            return new Cycle(varCycle, releaseDate, eol, latest, link, lts, support, discontinued);
        }

        /// <summary>
        /// Serializes a <see cref="Cycle" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cycle"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Cycle cycle, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, cycle, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Cycle" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cycle"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Cycle cycle, JsonSerializerOptions jsonSerializerOptions)
        {
            if (cycle.VarCycleOption.IsSet && cycle.VarCycle == null)
                throw new ArgumentNullException(nameof(cycle.VarCycle), "Property is required for class Cycle.");

            if (cycle.EolOption.IsSet && cycle.Eol == null)
                throw new ArgumentNullException(nameof(cycle.Eol), "Property is required for class Cycle.");

            if (cycle.LatestOption.IsSet && cycle.Latest == null)
                throw new ArgumentNullException(nameof(cycle.Latest), "Property is required for class Cycle.");

            if (cycle.LtsOption.IsSet && cycle.Lts == null)
                throw new ArgumentNullException(nameof(cycle.Lts), "Property is required for class Cycle.");

            if (cycle.SupportOption.IsSet && cycle.Support == null)
                throw new ArgumentNullException(nameof(cycle.Support), "Property is required for class Cycle.");

            if (cycle.DiscontinuedOption.IsSet && cycle.Discontinued == null)
                throw new ArgumentNullException(nameof(cycle.Discontinued), "Property is required for class Cycle.");

            if (cycle.VarCycleOption.IsSet)
            {
                writer.WritePropertyName("cycle");
                JsonSerializer.Serialize(writer, cycle.VarCycle, jsonSerializerOptions);
            }
            if (cycle.ReleaseDateOption.IsSet)
                writer.WriteString("releaseDate", cycle.ReleaseDateOption.Value!.Value.ToString(ReleaseDateFormat));

            if (cycle.EolOption.IsSet)
            {
                writer.WritePropertyName("eol");
                JsonSerializer.Serialize(writer, cycle.Eol, jsonSerializerOptions);
            }
            if (cycle.LatestOption.IsSet)
                writer.WriteString("latest", cycle.Latest);

            if (cycle.LinkOption.IsSet)
                if (cycle.LinkOption.Value != null)
                    writer.WriteString("link", cycle.Link);
                else
                    writer.WriteNull("link");

            if (cycle.LtsOption.IsSet)
            {
                writer.WritePropertyName("lts");
                JsonSerializer.Serialize(writer, cycle.Lts, jsonSerializerOptions);
            }
            if (cycle.SupportOption.IsSet)
            {
                writer.WritePropertyName("support");
                JsonSerializer.Serialize(writer, cycle.Support, jsonSerializerOptions);
            }
            if (cycle.DiscontinuedOption.IsSet)
            {
                writer.WritePropertyName("discontinued");
                JsonSerializer.Serialize(writer, cycle.Discontinued, jsonSerializerOptions);
            }
        }
    }
}
