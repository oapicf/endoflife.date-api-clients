# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cycle_cycle import CycleCycle
from openapi_server.models.cycle_discontinued import CycleDiscontinued
from openapi_server.models.cycle_eol import CycleEol
from openapi_server.models.cycle_lts import CycleLts
from openapi_server.models.cycle_support import CycleSupport
from openapi_server import util


class Cycle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cycle: CycleCycle=None, release_date: date=None, eol: CycleEol=None, latest: str=None, link: str=None, lts: CycleLts=None, support: CycleSupport=None, discontinued: CycleDiscontinued=None):
        """Cycle - a model defined in OpenAPI

        :param cycle: The cycle of this Cycle.
        :param release_date: The release_date of this Cycle.
        :param eol: The eol of this Cycle.
        :param latest: The latest of this Cycle.
        :param link: The link of this Cycle.
        :param lts: The lts of this Cycle.
        :param support: The support of this Cycle.
        :param discontinued: The discontinued of this Cycle.
        """
        self.openapi_types = {
            'cycle': CycleCycle,
            'release_date': date,
            'eol': CycleEol,
            'latest': str,
            'link': str,
            'lts': CycleLts,
            'support': CycleSupport,
            'discontinued': CycleDiscontinued
        }

        self.attribute_map = {
            'cycle': 'cycle',
            'release_date': 'releaseDate',
            'eol': 'eol',
            'latest': 'latest',
            'link': 'link',
            'lts': 'lts',
            'support': 'support',
            'discontinued': 'discontinued'
        }

        self._cycle = cycle
        self._release_date = release_date
        self._eol = eol
        self._latest = latest
        self._link = link
        self._lts = lts
        self._support = support
        self._discontinued = discontinued

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cycle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cycle of this Cycle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cycle(self):
        """Gets the cycle of this Cycle.


        :return: The cycle of this Cycle.
        :rtype: CycleCycle
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this Cycle.


        :param cycle: The cycle of this Cycle.
        :type cycle: CycleCycle
        """

        self._cycle = cycle

    @property
    def release_date(self):
        """Gets the release_date of this Cycle.

        Release date for the first release in this cycle.

        :return: The release_date of this Cycle.
        :rtype: date
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this Cycle.

        Release date for the first release in this cycle.

        :param release_date: The release_date of this Cycle.
        :type release_date: date
        """
        if release_date is not None and len(release_date) > 10:
            raise ValueError("Invalid value for `release_date`, length must be less than or equal to `10`")
        if release_date is not None and len(release_date) < 10:
            raise ValueError("Invalid value for `release_date`, length must be greater than or equal to `10`")

        self._release_date = release_date

    @property
    def eol(self):
        """Gets the eol of this Cycle.


        :return: The eol of this Cycle.
        :rtype: CycleEol
        """
        return self._eol

    @eol.setter
    def eol(self, eol):
        """Sets the eol of this Cycle.


        :param eol: The eol of this Cycle.
        :type eol: CycleEol
        """

        self._eol = eol

    @property
    def latest(self):
        """Gets the latest of this Cycle.

        Latest release in this cycle.

        :return: The latest of this Cycle.
        :rtype: str
        """
        return self._latest

    @latest.setter
    def latest(self, latest):
        """Sets the latest of this Cycle.

        Latest release in this cycle.

        :param latest: The latest of this Cycle.
        :type latest: str
        """
        if latest is not None and len(latest) < 1:
            raise ValueError("Invalid value for `latest`, length must be greater than or equal to `1`")

        self._latest = latest

    @property
    def link(self):
        """Gets the link of this Cycle.

        Link to changelog for the latest release in this cycle, or null if unavailable.

        :return: The link of this Cycle.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Cycle.

        Link to changelog for the latest release in this cycle, or null if unavailable.

        :param link: The link of this Cycle.
        :type link: str
        """
        if link is not None and len(link) < 1:
            raise ValueError("Invalid value for `link`, length must be greater than or equal to `1`")

        self._link = link

    @property
    def lts(self):
        """Gets the lts of this Cycle.


        :return: The lts of this Cycle.
        :rtype: CycleLts
        """
        return self._lts

    @lts.setter
    def lts(self, lts):
        """Sets the lts of this Cycle.


        :param lts: The lts of this Cycle.
        :type lts: CycleLts
        """

        self._lts = lts

    @property
    def support(self):
        """Gets the support of this Cycle.


        :return: The support of this Cycle.
        :rtype: CycleSupport
        """
        return self._support

    @support.setter
    def support(self, support):
        """Sets the support of this Cycle.


        :param support: The support of this Cycle.
        :type support: CycleSupport
        """

        self._support = support

    @property
    def discontinued(self):
        """Gets the discontinued of this Cycle.


        :return: The discontinued of this Cycle.
        :rtype: CycleDiscontinued
        """
        return self._discontinued

    @discontinued.setter
    def discontinued(self, discontinued):
        """Sets the discontinued of this Cycle.


        :param discontinued: The discontinued of this Cycle.
        :type discontinued: CycleDiscontinued
        """

        self._discontinued = discontinued
