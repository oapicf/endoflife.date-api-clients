// tslint:disable
/**
 * endoflife.date
 * Documentation for the endoflife.date API. The API is currently in Alpha. Additional information about the API can be found on the [endoflife.date wiki](https://github.com/endoflife-date/endoflife.date/wiki)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    Cycle,
    CycleFromJSON,
    CycleToJSON,
} from '../models';

export interface GetApiProductCycleJsonRequest {
    product: any;
    cycle: any;
}

export interface GetApiProductJsonRequest {
    product: any;
}


/**
 * Return a list of all products. Each of these can be used for the other API endpoints.
 * All Products
 */
function getApiAllJsonRaw<T>( requestConfig: runtime.TypedQueryConfig<T, any> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/all.json`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Return a list of all products. Each of these can be used for the other API endpoints.
* All Products
*/
export function getApiAllJson<T>( requestConfig?: runtime.TypedQueryConfig<T, any>): QueryConfig<T> {
    return getApiAllJsonRaw( requestConfig);
}

/**
 * Gets details of a single cycle
 * Single cycle details
 */
function getApiProductCycleJsonRaw<T>(requestParameters: GetApiProductCycleJsonRequest, requestConfig: runtime.TypedQueryConfig<T, Cycle> = {}): QueryConfig<T> {
    if (requestParameters.product === null || requestParameters.product === undefined) {
        throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling getApiProductCycleJson.');
    }

    if (requestParameters.cycle === null || requestParameters.cycle === undefined) {
        throw new runtime.RequiredError('cycle','Required parameter requestParameters.cycle was null or undefined when calling getApiProductCycleJson.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/{product}/{cycle}.json`.replace(`{${"product"}}`, encodeURIComponent(String(requestParameters.product))).replace(`{${"cycle"}}`, encodeURIComponent(String(requestParameters.cycle))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CycleFromJSON(body), text);
    }

    return config;
}

/**
* Gets details of a single cycle
* Single cycle details
*/
export function getApiProductCycleJson<T>(requestParameters: GetApiProductCycleJsonRequest, requestConfig?: runtime.TypedQueryConfig<T, Cycle>): QueryConfig<T> {
    return getApiProductCycleJsonRaw(requestParameters, requestConfig);
}

/**
 * Get EoL dates of all cycles of a given product.
 * Get All Details
 */
function getApiProductJsonRaw<T>(requestParameters: GetApiProductJsonRequest, requestConfig: runtime.TypedQueryConfig<T, any> = {}): QueryConfig<T> {
    if (requestParameters.product === null || requestParameters.product === undefined) {
        throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling getApiProductJson.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/api/{product}.json`.replace(`{${"product"}}`, encodeURIComponent(String(requestParameters.product))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Get EoL dates of all cycles of a given product.
* Get All Details
*/
export function getApiProductJson<T>(requestParameters: GetApiProductJsonRequest, requestConfig?: runtime.TypedQueryConfig<T, any>): QueryConfig<T> {
    return getApiProductJsonRaw(requestParameters, requestConfig);
}

